{"ast":null,"code":"let Graph = require(\"@dagrejs/graphlib\").Graph;\nlet List = require(\"./data/list\");\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nmodule.exports = greedyFAS;\nlet DEFAULT_WEIGHT_FN = () => 1;\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  let state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  let results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return results.flatMap(e => g.outEdges(e.v, e.w));\n}\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  let results = [];\n  let sources = buckets[buckets.length - 1];\n  let sinks = buckets[0];\n  let entry;\n  while (g.nodeCount()) {\n    while (entry = sinks.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    while (entry = sources.dequeue()) {\n      removeNode(g, buckets, zeroIdx, entry);\n    }\n    if (g.nodeCount()) {\n      for (let i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n  return results;\n}\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  let results = collectPredecessors ? [] : undefined;\n  g.inEdges(entry.v).forEach(edge => {\n    let weight = g.edge(edge);\n    let uEntry = g.node(edge.v);\n    if (collectPredecessors) {\n      results.push({\n        v: edge.v,\n        w: edge.w\n      });\n    }\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n  g.outEdges(entry.v).forEach(edge => {\n    let weight = g.edge(edge);\n    let w = edge.w;\n    let wEntry = g.node(w);\n    wEntry[\"in\"] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n  g.removeNode(entry.v);\n  return results;\n}\nfunction buildState(g, weightFn) {\n  let fasGraph = new Graph();\n  let maxIn = 0;\n  let maxOut = 0;\n  g.nodes().forEach(v => {\n    fasGraph.setNode(v, {\n      v: v,\n      \"in\": 0,\n      out: 0\n    });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  g.edges().forEach(e => {\n    let prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    let weight = weightFn(e);\n    let edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn = Math.max(maxIn, fasGraph.node(e.w)[\"in\"] += weight);\n  });\n  let buckets = range(maxOut + maxIn + 3).map(() => new List());\n  let zeroIdx = maxIn + 1;\n  fasGraph.nodes().forEach(v => {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n  return {\n    graph: fasGraph,\n    buckets: buckets,\n    zeroIdx: zeroIdx\n  };\n}\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n}\nfunction range(limit) {\n  const range = [];\n  for (let i = 0; i < limit; i++) {\n    range.push(i);\n  }\n  return range;\n}","map":{"version":3,"names":["Graph","require","List","module","exports","greedyFAS","DEFAULT_WEIGHT_FN","g","weightFn","nodeCount","state","buildState","results","doGreedyFAS","graph","buckets","zeroIdx","flatMap","e","outEdges","v","w","sources","length","sinks","entry","dequeue","removeNode","i","concat","collectPredecessors","undefined","inEdges","forEach","edge","weight","uEntry","node","push","out","assignBucket","wEntry","fasGraph","maxIn","maxOut","nodes","setNode","edges","prevWeight","edgeWeight","setEdge","Math","max","range","map","enqueue","limit"],"sources":["/Users/ron/Documents/developer/patriothack/node_modules/@dagrejs/dagre/lib/greedy-fas.js"],"sourcesContent":["let Graph = require(\"@dagrejs/graphlib\").Graph;\nlet List = require(\"./data/list\");\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nmodule.exports = greedyFAS;\n\nlet DEFAULT_WEIGHT_FN = () => 1;\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  let state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  let results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return results.flatMap(e => g.outEdges(e.v, e.w));\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  let results = [];\n  let sources = buckets[buckets.length - 1];\n  let sinks = buckets[0];\n\n  let entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }\n    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }\n    if (g.nodeCount()) {\n      for (let i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  let results = collectPredecessors ? [] : undefined;\n\n  g.inEdges(entry.v).forEach(edge => {\n    let weight = g.edge(edge);\n    let uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  g.outEdges(entry.v).forEach(edge => {\n    let weight = g.edge(edge);\n    let w = edge.w;\n    let wEntry = g.node(w);\n    wEntry[\"in\"] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  let fasGraph = new Graph();\n  let maxIn = 0;\n  let maxOut = 0;\n\n  g.nodes().forEach(v => {\n    fasGraph.setNode(v, { v: v, \"in\": 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  g.edges().forEach(e => {\n    let prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    let weight = weightFn(e);\n    let edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)[\"in\"]  += weight);\n  });\n\n  let buckets = range(maxOut + maxIn + 3).map(() => new List());\n  let zeroIdx = maxIn + 1;\n\n  fasGraph.nodes().forEach(v => {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n}\n\nfunction range(limit) {\n  const range = [];\n  for (let i = 0; i < limit; i++) {\n    range.push(i);\n  }\n\n  return range;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}