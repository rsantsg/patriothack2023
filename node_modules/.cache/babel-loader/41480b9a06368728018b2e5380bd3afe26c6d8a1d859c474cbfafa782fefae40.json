{"ast":null,"code":"var Graph = require(\"./graph\");\nmodule.exports = {\n  write: write,\n  read: read\n};\n\n/**\n * Creates a JSON representation of the graph that can be serialized to a string with\n * JSON.stringify. The graph can later be restored using json.read.\n */\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound()\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g)\n  };\n  if (g.graph() !== undefined) {\n    json.value = structuredClone(g.graph());\n  }\n  return json;\n}\nfunction writeNodes(g) {\n  return g.nodes().map(function (v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = {\n      v: v\n    };\n    if (nodeValue !== undefined) {\n      node.value = nodeValue;\n    }\n    if (parent !== undefined) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\nfunction writeEdges(g) {\n  return g.edges().map(function (e) {\n    var edgeValue = g.edge(e);\n    var edge = {\n      v: e.v,\n      w: e.w\n    };\n    if (e.name !== undefined) {\n      edge.name = e.name;\n    }\n    if (edgeValue !== undefined) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\n/**\n * Takes JSON as input and returns the graph representation.\n *\n * @example\n * var g2 = graphlib.json.read(JSON.parse(str));\n * g2.nodes();\n * // ['a', 'b']\n * g2.edges()\n * // [ { v: 'a', w: 'b' } ]\n */\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  json.nodes.forEach(function (entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  json.edges.forEach(function (entry) {\n    g.setEdge({\n      v: entry.v,\n      w: entry.w,\n      name: entry.name\n    }, entry.value);\n  });\n  return g;\n}","map":{"version":3,"names":["Graph","require","module","exports","write","read","g","json","options","directed","isDirected","multigraph","isMultigraph","compound","isCompound","nodes","writeNodes","edges","writeEdges","graph","undefined","value","structuredClone","map","v","nodeValue","node","parent","e","edgeValue","edge","w","name","setGraph","forEach","entry","setNode","setParent","setEdge"],"sources":["/Users/ron/Documents/developer/patriothack/node_modules/@dagrejs/graphlib/lib/json.js"],"sourcesContent":["var Graph = require(\"./graph\");\n\nmodule.exports = {\n  write: write,\n  read: read\n};\n\n/**\n * Creates a JSON representation of the graph that can be serialized to a string with\n * JSON.stringify. The graph can later be restored using json.read.\n */\nfunction write(g) {\n  var json = {\n    options: {\n      directed: g.isDirected(),\n      multigraph: g.isMultigraph(),\n      compound: g.isCompound()\n    },\n    nodes: writeNodes(g),\n    edges: writeEdges(g)\n  };\n\n  if (g.graph() !== undefined) {\n    json.value = structuredClone(g.graph());\n  }\n  return json;\n}\n\nfunction writeNodes(g) {\n  return g.nodes().map(function(v) {\n    var nodeValue = g.node(v);\n    var parent = g.parent(v);\n    var node = { v: v };\n    if (nodeValue !== undefined) {\n      node.value = nodeValue;\n    }\n    if (parent !== undefined) {\n      node.parent = parent;\n    }\n    return node;\n  });\n}\n\nfunction writeEdges(g) {\n  return g.edges().map(function(e) {\n    var edgeValue = g.edge(e);\n    var edge = { v: e.v, w: e.w };\n    if (e.name !== undefined) {\n      edge.name = e.name;\n    }\n    if (edgeValue !== undefined) {\n      edge.value = edgeValue;\n    }\n    return edge;\n  });\n}\n\n/**\n * Takes JSON as input and returns the graph representation.\n *\n * @example\n * var g2 = graphlib.json.read(JSON.parse(str));\n * g2.nodes();\n * // ['a', 'b']\n * g2.edges()\n * // [ { v: 'a', w: 'b' } ]\n */\nfunction read(json) {\n  var g = new Graph(json.options).setGraph(json.value);\n  json.nodes.forEach(function(entry) {\n    g.setNode(entry.v, entry.value);\n    if (entry.parent) {\n      g.setParent(entry.v, entry.parent);\n    }\n  });\n  json.edges.forEach(function(entry) {\n    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);\n  });\n  return g;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}