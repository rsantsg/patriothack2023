{"ast":null,"code":"var _jsxFileName = \"/Users/ron/Documents/developer/patriothack/src/components/LayoutFlow.js\",\n  _s = $RefreshSig$();\nimport Dagre from '@dagrejs/dagre';\nimport React, { useEffect, useCallback, useState } from 'react';\nimport ReactFlow, { ReactFlowProvider, Panel, useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport CustomNode from './CustomNode';\nimport { mapEdges } from './mapData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateEdges = () => {\n  const initialEdges = [];\n  mapEdges.forEach(course => {\n    if (course.requisites.length > 0) {\n      course.requisites.forEach(req => {\n        initialEdges.push({\n          id: `e${course.id}${req}`,\n          source: req,\n          target: course.id,\n          animated: true\n        });\n      });\n    }\n  });\n  return initialEdges;\n};\nconsole.log(\"edges\");\nconst initialEdge = [{\n  id: 'e12',\n  source: 'cs110',\n  target: 'cs112',\n  animated: true\n}, {\n  id: 'e13',\n  source: 'cs211',\n  target: 'cs310',\n  animated: true\n}, {\n  id: 'e22a',\n  source: '2',\n  target: '2a',\n  animated: true\n}, {\n  id: 'e22b',\n  source: '2',\n  target: '2b',\n  animated: true\n}, {\n  id: 'e22c',\n  source: '2',\n  target: '2c',\n  animated: true\n}, {\n  id: 'e2c2d',\n  source: '2c',\n  target: '2d',\n  animated: true\n}];\n// const axios = require('axios');\n\n// const fetchData = async () => {\n\n//   console.log(\"Fetching Data\")\n\n//   try {\n//     const response = await axios.get();\n//     // Assuming resp.data is an array of data you want to handle\n//     //console.log(response)\n//     if(response.status ===200){\n//       const data = {\n//           name: response.data\n//       }\n\n//     }\n\n//   } catch (error) {\n//       console.log(error )\n//   } \n// };\n\nconst nodeTypes = {\n  custom: CustomNode\n};\nconst data = [{\n  \"id\": \"cs110\",\n  \"course\": \"Essentials of Computer Science\",\n  \"prerequisite\": [[]],\n  \"alternitive\": [[]],\n  \"description\": \"Offers a broad overview of computer science designed to provide computer science majors with an introduction to their discipline. Fundamental computing concepts such as number representation, programming environments, communication tools, and basic network security measures are covered. Privacy and ethical use of computing are also discussed along with guest lectures to sample current computer science research. Note: All computer science majors are required to take this course within their first year as a computer science major. Offered by Computer Science. Limited to two attempts.\",\n  \"credits\": 3\n}, {\n  \"id\": \"cs112\",\n  \"course\": \"Introduction to Computer Programming\",\n  \"prerequisite\": [[\"1\", \"Math104\"], [\"1\", \"Math104T\"], [\"1\", \"Math105\"], [\"1\", \"Math105T\"], [\"1\", \"Math113\"], [\"1\", \"Math115\"], [\"1\", \"Math123\"]],\n  \"alternitive\": [[\"1\", \"CS108\"], [\"1\", \"CS109\"]],\n  \"description\": \"Rigorous introduction to problem solving through development of computer programs. Focuses on identifying algorithmic patterns in problems, describing problem solutions in high-level pseudocode, then implementing in a procedural programming language. Basic programming concepts are covered in detail including expressions, control structures, simple data types, and input/output. Program testing and debugging are discussed to verify that problems are solved correctly. Note: The department will drop students who fail to meet the prerequisites. Lectures and Labs are offered in groups. Students MUST register for a lecture and a lab from the same group. Offered by Computer Science. Limited to two attempts.\",\n  \"credits\": 4\n}, {\n  \"id\": \"cs211\",\n  \"course\": \"Object-Oriented Programming\",\n  \"prerequisite\": [[\"1\", \"cs112\"], [\"1\", \"cs109\"]],\n  \"alternitive\": [[]],\n  \"description\": \"Thorough treatment of programming according to object-oriented principles. Introduces classes, interfaces, inheritance, polymorphism, and single dispatch as means to decompose problems. Covers intermediate programming techniques including error handling through exceptions, arrangement of source code into packages, and simple data structures. Intermediate debugging techniques and unit testing are covered. Note: Lectures and labs are offered in groups. Students MUST register for a lecture and a lab from the same group. Offered by Computer Science. Limited to two attempts.\",\n  \"credits\": 3\n}, {\n  \"id\": \"cs262\",\n  \"course\": \"Introduction to Low-Level Programming\",\n  \"prerequisite\": [[\"1\", \"cs110\"], [\"1\", \"cs101\"], [\"2\", \"cs211\"], [\"2\", \"cs222\"]],\n  \"alternitive\": [[]],\n  \"description\": \"Introduction to the language C, as well as operating system concepts, in UNIX, to prepare students for topics in systems programming. Offered by Computer Science. Limited to two attempts.\",\n  \"credits\": 3\n}, {\n  \"id\": \"cs306\",\n  \"course\": \"Synthesis of Ethics and Law for the Computing Professional\",\n  \"prerequisite\": [[\"1\", \"cs105\"], [\"1\", \"cs110\"], [\"2\", \"comm100\"], [\"2\", \"comm101\"], [\"2\", \"engh302\"]],\n  \"alternitive\": [[]],\n  \"description\": \"Practical course to become effective computer professional. Examines legal and ethical issues surrounding computer technology and its use, as well as the foundation building that is necessary to deal with those challenges. Applies philosophical bases for ethical decision making to modern concerns raised by computers and technology. Addresses topics covered by CS 105 and CS 110 in a more intensive manner and focuses on the emerging legal and ethical issues involved in e-commerce and widespread use of the Internet. Notes: Computer science majors may use this course to satisfy the Mason Core synthesis requirement, so long as they have not previously taken CS 305 for credit. Offered by Computer Science. Limited to two attempts.\",\n  \"credits\": 3\n}, {\n  \"id\": \"cs310\",\n  \"course\": \"Data Structures\",\n  \"prerequisite\": [[\"1\", \"cs211\"], [\"2\", \"math125\"], [\"2\", \"math113\"], [\"3\", \"math124\"], [\"3\", \"math115\"]],\n  \"alternitive\": [[]],\n  \"description\": \"Focuses on object-oriented programming with an emphasis on tools and techniques for developing moderate to large programs. Topics include use and implementation of linear and nonlinear data structures and the design and analysis of elementary algorithms. Offered by Computer Science. Limited to two attempts.\",\n  \"credits\": 3\n}];\nconst initialNode = [{\n  id: '1',\n  type: 'custom',\n  data: {\n    label: 'CS 110'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: '2',\n  type: 'custom',\n  data: {\n    label: 'node 2'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: '2a',\n  data: {\n    label: 'node 2a'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: '2b',\n  data: {\n    label: 'node 2b'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: '2c',\n  data: {\n    label: 'node 2c'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: '2d',\n  data: {\n    label: 'node 2d'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}, {\n  id: '3',\n  data: {\n    label: 'node 3'\n  },\n  position: {\n    x: 0,\n    y: 0\n  }\n}];\n// const generateEdges = (data)=>{\n//   const id =   new Date().toString()\n//   const initialEdges = data.map(\n//     (course) =>{\n\n//     }\n//   )\n// }\n\nconst g = new Dagre.graphlib.Graph().setDefaultEdgeLabel(() => ({}));\nconst getLayoutedElements = (nodes, edges, options) => {\n  g.setGraph({\n    rankdir: 'RL',\n    ranksep: 200,\n    edgesep: 200\n  }); // 'TB' stands for top-to-bottom layout\n\n  edges.forEach(edge => g.setEdge(edge.source, edge.target));\n  nodes.forEach(node => g.setNode(node.id, node));\n  Dagre.layout(g);\n  return {\n    nodes: nodes.map(node => {\n      const {\n        x,\n        y\n      } = g.node(node.id);\n      return {\n        ...node,\n        position: {\n          x,\n          y\n        }\n      };\n    }),\n    edges\n  };\n};\nconst nodeGenerator = data => {\n  const initialNodes = data.map(course => {\n    const node = {\n      id: course.id,\n      type: \"custom\",\n      data: {\n        label: course\n      },\n      position: {\n        x: 0,\n        y: 0\n      }\n    };\n    return node;\n  });\n  return initialNodes;\n};\nconst LayoutFlow = () => {\n  _s();\n  const [initialNodes, setInitialNodes] = useState(nodeGenerator(data));\n  const [initialEdges, setInitialEdges] = useState();\n\n  //const [ initialNodes, setInitiaNode] = useState([])\n\n  console.log(typeof initialNodes);\n  const {\n    fitView\n  } = useReactFlow();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdge);\n  const onLayout = useCallback(direction => {\n    const layouted = getLayoutedElements(nodes, edges, {\n      direction\n    });\n    setNodes([...layouted.nodes]);\n    setEdges([...layouted.edges]);\n    window.requestAnimationFrame(() => {\n      fitView();\n    });\n  }, [nodes, edges]);\n  console.log(initialEdges);\n  useEffect(() => {\n    onLayout('TB');\n    //setInitiaNode(nodeGenerator(data))\n  }, []);\n  console.log(initialNodes);\n  if (initialNodes.length === 0) {\n    // Return some loading indicator or a message\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(ReactFlow, {\n    nodes: nodes,\n    edges: edges,\n    nodeTypes: nodeTypes,\n    fitView: true,\n    children: /*#__PURE__*/_jsxDEV(Panel, {\n      position: \"top-right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 257,\n    columnNumber: 5\n  }, this);\n};\n_s(LayoutFlow, \"UPhG31a6p8igmGLFY27HG40ioGo=\", false, function () {\n  return [useReactFlow, useNodesState, useEdgesState];\n});\n_c = LayoutFlow;\nexport default function () {\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(LayoutFlow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n}\nvar _c;\n$RefreshReg$(_c, \"LayoutFlow\");","map":{"version":3,"names":["Dagre","React","useEffect","useCallback","useState","ReactFlow","ReactFlowProvider","Panel","useNodesState","useEdgesState","useReactFlow","CustomNode","mapEdges","jsxDEV","_jsxDEV","generateEdges","initialEdges","forEach","course","requisites","length","req","push","id","source","target","animated","console","log","initialEdge","nodeTypes","custom","data","initialNode","type","label","position","x","y","g","graphlib","Graph","setDefaultEdgeLabel","getLayoutedElements","nodes","edges","options","setGraph","rankdir","ranksep","edgesep","edge","setEdge","node","setNode","layout","map","nodeGenerator","initialNodes","LayoutFlow","_s","setInitialNodes","setInitialEdges","fitView","setNodes","onNodesChange","setEdges","onEdgesChange","onLayout","direction","layouted","window","requestAnimationFrame","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ron/Documents/developer/patriothack/src/components/LayoutFlow.js"],"sourcesContent":["import Dagre from '@dagrejs/dagre';\nimport React, { useEffect,useCallback, useState } from 'react';\nimport ReactFlow, {\n  ReactFlowProvider,\n  Panel,\n  useNodesState,\n  useEdgesState,\n  useReactFlow,\n} from 'reactflow';\n\nimport 'reactflow/dist/style.css';\nimport CustomNode from './CustomNode';\nimport { mapEdges } from './mapData';\nconst generateEdges = () => {\n  const initialEdges = [];\n\n  mapEdges.forEach((course) => {\n    if (course.requisites.length > 0) {\n      course.requisites.forEach((req) => {\n        initialEdges.push({\n          id: `e${course.id}${req}`,\n          source: req,\n          target: course.id,\n          animated: true,\n        });\n      });\n    }\n  });\n\n  return initialEdges;\n};\n\nconsole.log(\"edges\")\nconst initialEdge = [\n  { id: 'e12', source: 'cs110', target: 'cs112', animated: true },\n  { id: 'e13', source: 'cs211', target: 'cs310', animated: true },\n  { id: 'e22a', source: '2', target: '2a', animated: true },\n  { id: 'e22b', source: '2', target: '2b', animated: true },\n  { id: 'e22c', source: '2', target: '2c', animated: true },\n  { id: 'e2c2d', source: '2c', target: '2d', animated: true },\n];\n// const axios = require('axios');\n\n// const fetchData = async () => {\n\n//   console.log(\"Fetching Data\")\n\n//   try {\n//     const response = await axios.get();\n//     // Assuming resp.data is an array of data you want to handle\n//     //console.log(response)\n//     if(response.status ===200){\n//       const data = {\n//           name: response.data\n//       }\n\n      \n\n\n//     }\n   \n//   } catch (error) {\n//       console.log(error )\n//   } \n// };\n\nconst nodeTypes = {\n  custom: CustomNode,\n};\n\nconst data = [\n  {\n      \"id\": \"cs110\",\n      \"course\": \"Essentials of Computer Science\",\n      \"prerequisite\": [[]],\n      \"alternitive\": [[]],\n      \"description\": \"Offers a broad overview of computer science designed to provide computer science majors with an introduction to their discipline. Fundamental computing concepts such as number representation, programming environments, communication tools, and basic network security measures are covered. Privacy and ethical use of computing are also discussed along with guest lectures to sample current computer science research. Note: All computer science majors are required to take this course within their first year as a computer science major. Offered by Computer Science. Limited to two attempts.\",\n      \"credits\": 3\n  },\n  {\n      \"id\": \"cs112\",\n      \"course\": \"Introduction to Computer Programming\",\n      \"prerequisite\": [[\"1\", \"Math104\"], [\"1\", \"Math104T\"], [\"1\", \"Math105\"], [\"1\", \"Math105T\"], [\"1\", \"Math113\"], [\"1\", \"Math115\"], [\"1\", \"Math123\"]],\n      \"alternitive\": [[\"1\", \"CS108\"],[\"1\", \"CS109\"]],\n      \"description\": \"Rigorous introduction to problem solving through development of computer programs. Focuses on identifying algorithmic patterns in problems, describing problem solutions in high-level pseudocode, then implementing in a procedural programming language. Basic programming concepts are covered in detail including expressions, control structures, simple data types, and input/output. Program testing and debugging are discussed to verify that problems are solved correctly. Note: The department will drop students who fail to meet the prerequisites. Lectures and Labs are offered in groups. Students MUST register for a lecture and a lab from the same group. Offered by Computer Science. Limited to two attempts.\",\n      \"credits\": 4\n  },\n  {\n      \"id\": \"cs211\",\n      \"course\": \"Object-Oriented Programming\",\n      \"prerequisite\": [[\"1\",\"cs112\"], [\"1\",\"cs109\"]],\n      \"alternitive\": [[]],\n      \"description\": \"Thorough treatment of programming according to object-oriented principles. Introduces classes, interfaces, inheritance, polymorphism, and single dispatch as means to decompose problems. Covers intermediate programming techniques including error handling through exceptions, arrangement of source code into packages, and simple data structures. Intermediate debugging techniques and unit testing are covered. Note: Lectures and labs are offered in groups. Students MUST register for a lecture and a lab from the same group. Offered by Computer Science. Limited to two attempts.\",\n      \"credits\": 3\n  },\n  {\n      \"id\": \"cs262\",\n      \"course\": \"Introduction to Low-Level Programming\",\n      \"prerequisite\": [[\"1\",\"cs110\"], [\"1\", \"cs101\"], [\"2\",\"cs211\"], [\"2\", \"cs222\"]],\n      \"alternitive\": [[]],\n      \"description\": \"Introduction to the language C, as well as operating system concepts, in UNIX, to prepare students for topics in systems programming. Offered by Computer Science. Limited to two attempts.\",\n      \"credits\": 3\n  },\n  {\n      \"id\": \"cs306\",\n      \"course\": \"Synthesis of Ethics and Law for the Computing Professional\",\n      \"prerequisite\": [[\"1\",\"cs105\"],[\"1\",\"cs110\"], [\"2\",\"comm100\"],[\"2\", \"comm101\"],[\"2\",\"engh302\"]],\n      \"alternitive\": [[]],\n      \"description\": \"Practical course to become effective computer professional. Examines legal and ethical issues surrounding computer technology and its use, as well as the foundation building that is necessary to deal with those challenges. Applies philosophical bases for ethical decision making to modern concerns raised by computers and technology. Addresses topics covered by CS 105 and CS 110 in a more intensive manner and focuses on the emerging legal and ethical issues involved in e-commerce and widespread use of the Internet. Notes: Computer science majors may use this course to satisfy the Mason Core synthesis requirement, so long as they have not previously taken CS 305 for credit. Offered by Computer Science. Limited to two attempts.\",\n      \"credits\": 3\n  },\n  {\n      \"id\": \"cs310\",\n      \"course\": \"Data Structures\",\n      \"prerequisite\": [[\"1\", \"cs211\"], [\"2\", \"math125\"], [\"2\",\"math113\"],[\"3\",\"math124\"], [\"3\", \"math115\"]],\n      \"alternitive\": [[]],\n      \"description\": \"Focuses on object-oriented programming with an emphasis on tools and techniques for developing moderate to large programs. Topics include use and implementation of linear and nonlinear data structures and the design and analysis of elementary algorithms. Offered by Computer Science. Limited to two attempts.\",\n      \"credits\": 3\n  },] \n\n\nconst initialNode = [\n  {\n    id: '1',\n    type: 'custom',\n    data: { label: 'CS 110' },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: '2',\n    type: 'custom',\n\n    data: { label: 'node 2' },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: '2a',\n    data: { label: 'node 2a' },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: '2b',\n    data: { label: 'node 2b' },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: '2c',\n    data: { label: 'node 2c' },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: '2d',\n    data: { label: 'node 2d' },\n    position: { x: 0, y: 0 },\n  },\n  {\n    id: '3',\n    data: { label: 'node 3' },\n    position: { x: 0, y: 0 },\n  },\n];\n// const generateEdges = (data)=>{\n//   const id =   new Date().toString()\n//   const initialEdges = data.map(\n//     (course) =>{\n\n//     }\n//   )\n// }\n\n\nconst g = new Dagre.graphlib.Graph().setDefaultEdgeLabel(() => ({}));\n\nconst getLayoutedElements = (nodes, edges, options) => {\n  g.setGraph({ rankdir: 'RL', ranksep: 200, edgesep:200 }); // 'TB' stands for top-to-bottom layout\n\n  edges.forEach((edge) => g.setEdge(edge.source, edge.target));\n  nodes.forEach((node) => g.setNode(node.id, node));\n\n  Dagre.layout(g);\n\n  return {\n    nodes: nodes.map((node) => {\n      const { x, y } = g.node(node.id);\n\n      return { ...node, position: { x, y } };\n    }),\n    edges,\n  };\n};\n\nconst nodeGenerator = (data)=>{\n\n\n  const initialNodes = data.map((course)=>{\n\n      const node ={\n        id: course.id, \n        type:\"custom\"\n        ,\n        data:{\n          label: course\n        }, \n        position: { x: 0, y: 0 },\n\n\n      }\n\n      return  node \n        \n\n      \n    })\n    return initialNodes \n\n\n}\n\nconst LayoutFlow = () => {\n  const [initialNodes, setInitialNodes] = useState(nodeGenerator(data));\n  const [initialEdges, setInitialEdges] = useState()\n \n  //const [ initialNodes, setInitiaNode] = useState([])\n\n\n\n  console.log(typeof initialNodes)\n  const { fitView } = useReactFlow();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdge);\n  const onLayout = useCallback(\n    (direction) => {\n      const layouted = getLayoutedElements(nodes, edges, { direction });\n\n      setNodes([...layouted.nodes]);\n      setEdges([...layouted.edges]);\n\n      window.requestAnimationFrame(() => {\n        fitView();\n      });\n    },\n    [nodes, edges]\n  );\n  console.log(initialEdges)\n  useEffect(() => {\n    onLayout('TB');\n    //setInitiaNode(nodeGenerator(data))\n    \n  }, []);\n  console.log(initialNodes)\n  if (initialNodes.length === 0) {\n    // Return some loading indicator or a message\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <ReactFlow\n      nodes={nodes}\n      edges={edges}\n      nodeTypes={nodeTypes}\n\n      fitView\n    >\n      <Panel position=\"top-right\">\n\n      </Panel>\n    </ReactFlow>\n  );\n};\n\n\n\nexport default function () {\n  return (\n    <ReactFlowProvider>\n      <LayoutFlow />\n    </ReactFlowProvider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}