{"ast":null,"code":"\"use strict\";\n\nvar Graph = require(\"@dagrejs/graphlib\").Graph;\nvar slack = require(\"./util\").slack;\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({\n    directed: false\n  });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    g.nodeEdges(v).forEach(e => {\n      var edgeV = e.v,\n        w = v === edgeV ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n  t.nodes().forEach(dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  const edges = g.edges();\n  return edges.reduce((acc, edge) => {\n    let edgeSlack = Number.POSITIVE_INFINITY;\n    if (t.hasNode(edge.v) !== t.hasNode(edge.w)) {\n      edgeSlack = slack(g, edge);\n    }\n    if (edgeSlack < acc[0]) {\n      return [edgeSlack, edge];\n    }\n    return acc;\n  }, [Number.POSITIVE_INFINITY, null])[1];\n}\nfunction shiftRanks(t, g, delta) {\n  t.nodes().forEach(v => g.node(v).rank += delta);\n}","map":{"version":3,"names":["Graph","require","slack","module","exports","feasibleTree","g","t","directed","start","nodes","size","nodeCount","setNode","edge","delta","tightTree","findMinSlackEdge","hasNode","v","shiftRanks","dfs","nodeEdges","forEach","e","edgeV","w","setEdge","edges","reduce","acc","edgeSlack","Number","POSITIVE_INFINITY","node","rank"],"sources":["/Users/ron/Documents/developer/patriothack/node_modules/@dagrejs/dagre/lib/rank/feasible-tree.js"],"sourcesContent":["\"use strict\";\n\nvar Graph = require(\"@dagrejs/graphlib\").Graph;\nvar slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    g.nodeEdges(v).forEach(e => {\n      var edgeV = e.v,\n        w = (v === edgeV) ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  t.nodes().forEach(dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  const edges = g.edges();\n\n  return edges.reduce((acc, edge) => {\n    let edgeSlack = Number.POSITIVE_INFINITY;\n    if (t.hasNode(edge.v) !== t.hasNode(edge.w)) {\n      edgeSlack = slack(g, edge);\n    }\n\n    if (edgeSlack < acc[0]) {\n      return [edgeSlack, edge];\n    }\n\n    return acc;\n  }, [Number.POSITIVE_INFINITY, null])[1];\n}\n\nfunction shiftRanks(t, g, delta) {\n  t.nodes().forEach(v => g.node(v).rank += delta);\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAmB,CAAC,CAACD,KAAK;AAC9C,IAAIE,KAAK,GAAGD,OAAO,CAAC,QAAQ,CAAC,CAACC,KAAK;AAEnCC,MAAM,CAACC,OAAO,GAAGC,YAAY;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,CAAC,EAAE;EACvB,IAAIC,CAAC,GAAG,IAAIP,KAAK,CAAC;IAAEQ,QAAQ,EAAE;EAAM,CAAC,CAAC;;EAEtC;EACA,IAAIC,KAAK,GAAGH,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EACxB,IAAIC,IAAI,GAAGL,CAAC,CAACM,SAAS,CAAC,CAAC;EACxBL,CAAC,CAACM,OAAO,CAACJ,KAAK,EAAE,CAAC,CAAC,CAAC;EAEpB,IAAIK,IAAI,EAAEC,KAAK;EACf,OAAOC,SAAS,CAACT,CAAC,EAAED,CAAC,CAAC,GAAGK,IAAI,EAAE;IAC7BG,IAAI,GAAGG,gBAAgB,CAACV,CAAC,EAAED,CAAC,CAAC;IAC7BS,KAAK,GAAGR,CAAC,CAACW,OAAO,CAACJ,IAAI,CAACK,CAAC,CAAC,GAAGjB,KAAK,CAACI,CAAC,EAAEQ,IAAI,CAAC,GAAG,CAACZ,KAAK,CAACI,CAAC,EAAEQ,IAAI,CAAC;IAC5DM,UAAU,CAACb,CAAC,EAAED,CAAC,EAAES,KAAK,CAAC;EACzB;EAEA,OAAOR,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA,SAASS,SAASA,CAACT,CAAC,EAAED,CAAC,EAAE;EACvB,SAASe,GAAGA,CAACF,CAAC,EAAE;IACdb,CAAC,CAACgB,SAAS,CAACH,CAAC,CAAC,CAACI,OAAO,CAACC,CAAC,IAAI;MAC1B,IAAIC,KAAK,GAAGD,CAAC,CAACL,CAAC;QACbO,CAAC,GAAIP,CAAC,KAAKM,KAAK,GAAID,CAAC,CAACE,CAAC,GAAGD,KAAK;MACjC,IAAI,CAAClB,CAAC,CAACW,OAAO,CAACQ,CAAC,CAAC,IAAI,CAACxB,KAAK,CAACI,CAAC,EAAEkB,CAAC,CAAC,EAAE;QACjCjB,CAAC,CAACM,OAAO,CAACa,CAAC,EAAE,CAAC,CAAC,CAAC;QAChBnB,CAAC,CAACoB,OAAO,CAACR,CAAC,EAAEO,CAAC,EAAE,CAAC,CAAC,CAAC;QACnBL,GAAG,CAACK,CAAC,CAAC;MACR;IACF,CAAC,CAAC;EACJ;EAEAnB,CAAC,CAACG,KAAK,CAAC,CAAC,CAACa,OAAO,CAACF,GAAG,CAAC;EACtB,OAAOd,CAAC,CAACK,SAAS,CAAC,CAAC;AACtB;;AAEA;AACA;AACA;AACA;AACA,SAASK,gBAAgBA,CAACV,CAAC,EAAED,CAAC,EAAE;EAC9B,MAAMsB,KAAK,GAAGtB,CAAC,CAACsB,KAAK,CAAC,CAAC;EAEvB,OAAOA,KAAK,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEhB,IAAI,KAAK;IACjC,IAAIiB,SAAS,GAAGC,MAAM,CAACC,iBAAiB;IACxC,IAAI1B,CAAC,CAACW,OAAO,CAACJ,IAAI,CAACK,CAAC,CAAC,KAAKZ,CAAC,CAACW,OAAO,CAACJ,IAAI,CAACY,CAAC,CAAC,EAAE;MAC3CK,SAAS,GAAG7B,KAAK,CAACI,CAAC,EAAEQ,IAAI,CAAC;IAC5B;IAEA,IAAIiB,SAAS,GAAGD,GAAG,CAAC,CAAC,CAAC,EAAE;MACtB,OAAO,CAACC,SAAS,EAAEjB,IAAI,CAAC;IAC1B;IAEA,OAAOgB,GAAG;EACZ,CAAC,EAAE,CAACE,MAAM,CAACC,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;AACzC;AAEA,SAASb,UAAUA,CAACb,CAAC,EAAED,CAAC,EAAES,KAAK,EAAE;EAC/BR,CAAC,CAACG,KAAK,CAAC,CAAC,CAACa,OAAO,CAACJ,CAAC,IAAIb,CAAC,CAAC4B,IAAI,CAACf,CAAC,CAAC,CAACgB,IAAI,IAAIpB,KAAK,CAAC;AACjD"},"metadata":{},"sourceType":"script","externalDependencies":[]}