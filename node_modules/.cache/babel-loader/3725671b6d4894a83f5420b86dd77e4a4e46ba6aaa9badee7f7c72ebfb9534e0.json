{"ast":null,"code":"\"use strict\";\n\nvar DEFAULT_EDGE_NAME = \"\\x00\";\nvar GRAPH_NODE = \"\\x00\";\nvar EDGE_KEY_DELIM = \"\\x01\";\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nclass Graph {\n  #isDirected = true;\n  #isMultigraph = false;\n  #isCompound = false;\n\n  // Label for the graph itself\n  #label;\n\n  // Defaults to be set when creating a new node\n  #defaultNodeLabelFn = () => undefined;\n\n  // Defaults to be set when creating a new edge\n  #defaultEdgeLabelFn = () => undefined;\n\n  // v -> label\n  #nodes = {};\n\n  // v -> edgeObj\n  #in = {};\n\n  // u -> v -> Number\n  #preds = {};\n\n  // v -> edgeObj\n  #out = {};\n\n  // v -> w -> Number\n  #sucs = {};\n\n  // e -> edgeObj\n  #edgeObjs = {};\n\n  // e -> label\n  #edgeLabels = {};\n\n  /* Number of nodes in the graph. Should only be changed by the implementation. */\n  #nodeCount = 0;\n\n  /* Number of edges in the graph. Should only be changed by the implementation. */\n  #edgeCount = 0;\n  #parent;\n  #children;\n  constructor(opts) {\n    if (opts) {\n      this.#isDirected = opts.hasOwnProperty(\"directed\") ? opts.directed : true;\n      this.#isMultigraph = opts.hasOwnProperty(\"multigraph\") ? opts.multigraph : false;\n      this.#isCompound = opts.hasOwnProperty(\"compound\") ? opts.compound : false;\n    }\n    if (this.#isCompound) {\n      // v -> parent\n      this.#parent = {};\n\n      // v -> children\n      this.#children = {};\n      this.#children[GRAPH_NODE] = {};\n    }\n  }\n\n  /* === Graph functions ========= */\n\n  /**\n   * Whether graph was created with 'directed' flag set to true or not.\n   */\n  isDirected() {\n    return this.#isDirected;\n  }\n\n  /**\n   * Whether graph was created with 'multigraph' flag set to true or not.\n   */\n  isMultigraph() {\n    return this.#isMultigraph;\n  }\n\n  /**\n   * Whether graph was created with 'compound' flag set to true or not.\n   */\n  isCompound() {\n    return this.#isCompound;\n  }\n\n  /**\n   * Sets the label of the graph.\n   */\n  setGraph(label) {\n    this.#label = label;\n    return this;\n  }\n\n  /**\n   * Gets the graph label.\n   */\n  graph() {\n    return this.#label;\n  }\n\n  /* === Node functions ========== */\n\n  /**\n   * Sets the default node label. If newDefault is a function, it will be\n   * invoked ach time when setting a label for a node. Otherwise, this label\n   * will be assigned as default label in case if no label was specified while\n   * setting a node.\n   * Complexity: O(1).\n   */\n  setDefaultNodeLabel(newDefault) {\n    this.#defaultNodeLabelFn = newDefault;\n    if (typeof newDefault !== 'function') {\n      this.#defaultNodeLabelFn = () => newDefault;\n    }\n    return this;\n  }\n\n  /**\n   * Gets the number of nodes in the graph.\n   * Complexity: O(1).\n   */\n  nodeCount() {\n    return this.#nodeCount;\n  }\n\n  /**\n   * Gets all nodes of the graph. Note, the in case of compound graph subnodes are\n   * not included in list.\n   * Complexity: O(1).\n   */\n  nodes() {\n    return Object.keys(this.#nodes);\n  }\n\n  /**\n   * Gets list of nodes without in-edges.\n   * Complexity: O(|V|).\n   */\n  sources() {\n    var self = this;\n    return this.nodes().filter(v => Object.keys(self.#in[v]).length === 0);\n  }\n\n  /**\n   * Gets list of nodes without out-edges.\n   * Complexity: O(|V|).\n   */\n  sinks() {\n    var self = this;\n    return this.nodes().filter(v => Object.keys(self.#out[v]).length === 0);\n  }\n\n  /**\n   * Invokes setNode method for each node in names list.\n   * Complexity: O(|names|).\n   */\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    vs.forEach(function (v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Creates or updates the value for the node v in the graph. If label is supplied\n   * it is set as the value for the node. If label is not supplied and the node was\n   * created by this call then the default node label will be assigned.\n   * Complexity: O(1).\n   */\n  setNode(v, value) {\n    if (this.#nodes.hasOwnProperty(v)) {\n      if (arguments.length > 1) {\n        this.#nodes[v] = value;\n      }\n      return this;\n    }\n    this.#nodes[v] = arguments.length > 1 ? value : this.#defaultNodeLabelFn(v);\n    if (this.#isCompound) {\n      this.#parent[v] = GRAPH_NODE;\n      this.#children[v] = {};\n      this.#children[GRAPH_NODE][v] = true;\n    }\n    this.#in[v] = {};\n    this.#preds[v] = {};\n    this.#out[v] = {};\n    this.#sucs[v] = {};\n    ++this.#nodeCount;\n    return this;\n  }\n\n  /**\n   * Gets the label of node with specified name.\n   * Complexity: O(|V|).\n   */\n  node(v) {\n    return this.#nodes[v];\n  }\n\n  /**\n   * Detects whether graph has a node with specified name or not.\n   */\n  hasNode(v) {\n    return this.#nodes.hasOwnProperty(v);\n  }\n\n  /**\n   * Remove the node with the name from the graph or do nothing if the node is not in\n   * the graph. If the node was removed this function also removes any incident\n   * edges.\n   * Complexity: O(1).\n   */\n  removeNode(v) {\n    var self = this;\n    if (this.#nodes.hasOwnProperty(v)) {\n      var removeEdge = e => self.removeEdge(self.#edgeObjs[e]);\n      delete this.#nodes[v];\n      if (this.#isCompound) {\n        this.#removeFromParentsChildList(v);\n        delete this.#parent[v];\n        this.children(v).forEach(function (child) {\n          self.setParent(child);\n        });\n        delete this.#children[v];\n      }\n      Object.keys(this.#in[v]).forEach(removeEdge);\n      delete this.#in[v];\n      delete this.#preds[v];\n      Object.keys(this.#out[v]).forEach(removeEdge);\n      delete this.#out[v];\n      delete this.#sucs[v];\n      --this.#nodeCount;\n    }\n    return this;\n  }\n\n  /**\n   * Sets node p as a parent for node v if it is defined, or removes the\n   * parent for v if p is undefined. Method throws an exception in case of\n   * invoking it in context of noncompound graph.\n   * Average-case complexity: O(1).\n   */\n  setParent(v, parent) {\n    if (!this.#isCompound) {\n      throw new Error(\"Cannot set parent in a non-compound graph\");\n    }\n    if (parent === undefined) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += \"\";\n      for (var ancestor = parent; ancestor !== undefined; ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error(\"Setting \" + parent + \" as parent of \" + v + \" would create a cycle\");\n        }\n      }\n      this.setNode(parent);\n    }\n    this.setNode(v);\n    this.#removeFromParentsChildList(v);\n    this.#parent[v] = parent;\n    this.#children[parent][v] = true;\n    return this;\n  }\n  #removeFromParentsChildList(v) {\n    delete this.#children[this.#parent[v]][v];\n  }\n\n  /**\n   * Gets parent node for node v.\n   * Complexity: O(1).\n   */\n  parent(v) {\n    if (this.#isCompound) {\n      var parent = this.#parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n\n  /**\n   * Gets list of direct children of node v.\n   * Complexity: O(1).\n   */\n  children(v = GRAPH_NODE) {\n    if (this.#isCompound) {\n      var children = this.#children[v];\n      if (children) {\n        return Object.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n\n  /**\n   * Return all nodes that are predecessors of the specified node or undefined if node v is not in\n   * the graph. Behavior is undefined for undirected graphs - use neighbors instead.\n   * Complexity: O(|V|).\n   */\n  predecessors(v) {\n    var predsV = this.#preds[v];\n    if (predsV) {\n      return Object.keys(predsV);\n    }\n  }\n\n  /**\n   * Return all nodes that are successors of the specified node or undefined if node v is not in\n   * the graph. Behavior is undefined for undirected graphs - use neighbors instead.\n   * Complexity: O(|V|).\n   */\n  successors(v) {\n    var sucsV = this.#sucs[v];\n    if (sucsV) {\n      return Object.keys(sucsV);\n    }\n  }\n\n  /**\n   * Return all nodes that are predecessors or successors of the specified node or undefined if\n   * node v is not in the graph.\n   * Complexity: O(|V|).\n   */\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      const union = new Set(preds);\n      for (var succ of this.successors(v)) {\n        union.add(succ);\n      }\n      return Array.from(union.values());\n    }\n  }\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n\n  /**\n   * Creates new graph with nodes filtered via filter. Edges incident to rejected node\n   * are also removed. In case of compound graph, if parent is rejected by filter,\n   * than all its children are rejected too.\n   * Average-case complexity: O(|E|+|V|).\n   */\n  filterNodes(filter) {\n    var copy = new this.constructor({\n      directed: this.#isDirected,\n      multigraph: this.#isMultigraph,\n      compound: this.#isCompound\n    });\n    copy.setGraph(this.graph());\n    var self = this;\n    Object.entries(this.#nodes).forEach(function ([v, value]) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n    Object.values(this.#edgeObjs).forEach(function (e) {\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n    if (this.#isCompound) {\n      copy.nodes().forEach(v => copy.setParent(v, findParent(v)));\n    }\n    return copy;\n  }\n\n  /* === Edge functions ========== */\n\n  /**\n   * Sets the default edge label or factory function. This label will be\n   * assigned as default label in case if no label was specified while setting\n   * an edge or this function will be invoked each time when setting an edge\n   * with no label specified and returned value * will be used as a label for edge.\n   * Complexity: O(1).\n   */\n  setDefaultEdgeLabel(newDefault) {\n    this.#defaultEdgeLabelFn = newDefault;\n    if (typeof newDefault !== 'function') {\n      this.#defaultEdgeLabelFn = () => newDefault;\n    }\n    return this;\n  }\n\n  /**\n   * Gets the number of edges in the graph.\n   * Complexity: O(1).\n   */\n  edgeCount() {\n    return this.#edgeCount;\n  }\n\n  /**\n   * Gets edges of the graph. In case of compound graph subgraphs are not considered.\n   * Complexity: O(|E|).\n   */\n  edges() {\n    return Object.values(this.#edgeObjs);\n  }\n\n  /**\n   * Establish an edges path over the nodes in nodes list. If some edge is already\n   * exists, it will update its label, otherwise it will create an edge between pair\n   * of nodes with label provided or default label if no label provided.\n   * Complexity: O(|nodes|).\n   */\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    vs.reduce(function (v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n\n  /**\n   * Creates or updates the label for the edge (v, w) with the optionally supplied\n   * name. If label is supplied it is set as the value for the edge. If label is not\n   * supplied and the edge was created by this call then the default edge label will\n   * be assigned. The name parameter is only useful with multigraphs.\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n    if (typeof arg0 === \"object\" && arg0 !== null && \"v\" in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n    v = \"\" + v;\n    w = \"\" + w;\n    if (name !== undefined) {\n      name = \"\" + name;\n    }\n    var e = edgeArgsToId(this.#isDirected, v, w, name);\n    if (this.#edgeLabels.hasOwnProperty(e)) {\n      if (valueSpecified) {\n        this.#edgeLabels[e] = value;\n      }\n      return this;\n    }\n    if (name !== undefined && !this.#isMultigraph) {\n      throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n    this.#edgeLabels[e] = valueSpecified ? value : this.#defaultEdgeLabelFn(v, w, name);\n    var edgeObj = edgeArgsToObj(this.#isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n    Object.freeze(edgeObj);\n    this.#edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this.#preds[w], v);\n    incrementOrInitEntry(this.#sucs[v], w);\n    this.#in[w][e] = edgeObj;\n    this.#out[v][e] = edgeObj;\n    this.#edgeCount++;\n    return this;\n  }\n\n  /**\n   * Gets the label for the specified edge.\n   * Complexity: O(1).\n   */\n  edge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this.#isDirected, arguments[0]) : edgeArgsToId(this.#isDirected, v, w, name);\n    return this.#edgeLabels[e];\n  }\n\n  /**\n   * Gets the label for the specified edge and converts it to an object.\n   * Complexity: O(1)\n   */\n  edgeAsObj() {\n    const edge = this.edge(...arguments);\n    if (typeof edge !== \"object\") {\n      return {\n        label: edge\n      };\n    }\n    return edge;\n  }\n\n  /**\n   * Detects whether the graph contains specified edge or not. No subgraphs are considered.\n   * Complexity: O(1).\n   */\n  hasEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this.#isDirected, arguments[0]) : edgeArgsToId(this.#isDirected, v, w, name);\n    return this.#edgeLabels.hasOwnProperty(e);\n  }\n\n  /**\n   * Removes the specified edge from the graph. No subgraphs are considered.\n   * Complexity: O(1).\n   */\n  removeEdge(v, w, name) {\n    var e = arguments.length === 1 ? edgeObjToId(this.#isDirected, arguments[0]) : edgeArgsToId(this.#isDirected, v, w, name);\n    var edge = this.#edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this.#edgeLabels[e];\n      delete this.#edgeObjs[e];\n      decrementOrRemoveEntry(this.#preds[w], v);\n      decrementOrRemoveEntry(this.#sucs[v], w);\n      delete this.#in[w][e];\n      delete this.#out[v][e];\n      this.#edgeCount--;\n    }\n    return this;\n  }\n\n  /**\n   * Return all edges that point to the node v. Optionally filters those edges down to just those\n   * coming from node u. Behavior is undefined for undirected graphs - use nodeEdges instead.\n   * Complexity: O(|E|).\n   */\n  inEdges(v, u) {\n    var inV = this.#in[v];\n    if (inV) {\n      var edges = Object.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return edges.filter(edge => edge.v === u);\n    }\n  }\n\n  /**\n   * Return all edges that are pointed at by node v. Optionally filters those edges down to just\n   * those point to w. Behavior is undefined for undirected graphs - use nodeEdges instead.\n   * Complexity: O(|E|).\n   */\n  outEdges(v, w) {\n    var outV = this.#out[v];\n    if (outV) {\n      var edges = Object.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return edges.filter(edge => edge.w === w);\n    }\n  }\n\n  /**\n   * Returns all edges to or from node v regardless of direction. Optionally filters those edges\n   * down to just those between nodes v and w regardless of direction.\n   * Complexity: O(|E|).\n   */\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\nfunction decrementOrRemoveEntry(map, k) {\n  if (! --map[k]) {\n    delete map[k];\n  }\n}\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM + (name === undefined ? DEFAULT_EDGE_NAME : name);\n}\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj = {\n    v: v,\n    w: w\n  };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\nmodule.exports = Graph;","map":{"version":3,"names":["DEFAULT_EDGE_NAME","GRAPH_NODE","EDGE_KEY_DELIM","Graph","isDirected","isMultigraph","isCompound","label","defaultNodeLabelFn","#defaultNodeLabelFn","undefined","defaultEdgeLabelFn","#defaultEdgeLabelFn","nodes","in","preds","out","sucs","edgeObjs","edgeLabels","nodeCount","edgeCount","parent","children","constructor","opts","hasOwnProperty","directed","multigraph","compound","setGraph","graph","setDefaultNodeLabel","newDefault","Object","keys","sources","self","filter","v","length","sinks","setNodes","vs","value","args","arguments","forEach","setNode","node","hasNode","removeNode","removeEdge","e","removeFromParentsChildList","child","setParent","Error","ancestor","#removeFromParentsChildList","predecessors","predsV","successors","sucsV","neighbors","union","Set","succ","add","Array","from","values","isLeaf","filterNodes","copy","entries","w","setEdge","edge","parents","findParent","setDefaultEdgeLabel","edges","setPath","reduce","name","valueSpecified","arg0","edgeArgsToId","edgeObj","edgeArgsToObj","freeze","incrementOrInitEntry","edgeObjToId","edgeAsObj","hasEdge","decrementOrRemoveEntry","inEdges","u","inV","outEdges","outV","nodeEdges","concat","map","k","v_","w_","tmp","module","exports"],"sources":["/Users/ron/Documents/developer/patriothack/node_modules/@dagrejs/graphlib/lib/graph.js"],"sourcesContent":["\"use strict\";\n\nvar DEFAULT_EDGE_NAME = \"\\x00\";\nvar GRAPH_NODE = \"\\x00\";\nvar EDGE_KEY_DELIM = \"\\x01\";\n\n// Implementation notes:\n//\n//  * Node id query functions should return string ids for the nodes\n//  * Edge id query functions should return an \"edgeObj\", edge object, that is\n//    composed of enough information to uniquely identify an edge: {v, w, name}.\n//  * Internally we use an \"edgeId\", a stringified form of the edgeObj, to\n//    reference edges. This is because we need a performant way to look these\n//    edges up and, object properties, which have string keys, are the closest\n//    we're going to get to a performant hashtable in JavaScript.\n\nclass Graph {\n  #isDirected = true;\n  #isMultigraph = false;\n  #isCompound = false;\n\n  // Label for the graph itself\n  #label;\n\n  // Defaults to be set when creating a new node\n  #defaultNodeLabelFn = () => undefined;\n\n  // Defaults to be set when creating a new edge\n  #defaultEdgeLabelFn = () => undefined;\n\n  // v -> label\n  #nodes = {};\n\n  // v -> edgeObj\n  #in = {};\n\n  // u -> v -> Number\n  #preds = {};\n\n  // v -> edgeObj\n  #out = {};\n\n  // v -> w -> Number\n  #sucs = {};\n\n  // e -> edgeObj\n  #edgeObjs = {};\n\n  // e -> label\n  #edgeLabels = {};\n\n  /* Number of nodes in the graph. Should only be changed by the implementation. */\n  #nodeCount = 0;\n\n  /* Number of edges in the graph. Should only be changed by the implementation. */\n  #edgeCount = 0;\n\n  #parent;\n\n  #children;\n\n  constructor(opts) {\n    if (opts) {\n      this.#isDirected = opts.hasOwnProperty(\"directed\") ? opts.directed : true;\n      this.#isMultigraph = opts.hasOwnProperty(\"multigraph\") ? opts.multigraph : false;\n      this.#isCompound = opts.hasOwnProperty(\"compound\") ? opts.compound : false;\n    }\n\n    if (this.#isCompound) {\n      // v -> parent\n      this.#parent = {};\n\n      // v -> children\n      this.#children = {};\n      this.#children[GRAPH_NODE] = {};\n    }\n  }\n\n  /* === Graph functions ========= */\n\n  /**\n   * Whether graph was created with 'directed' flag set to true or not.\n   */\n  isDirected() {\n    return this.#isDirected;\n  }\n\n  /**\n   * Whether graph was created with 'multigraph' flag set to true or not.\n   */\n  isMultigraph() {\n    return this.#isMultigraph;\n  }\n\n  /**\n   * Whether graph was created with 'compound' flag set to true or not.\n   */\n  isCompound() {\n    return this.#isCompound;\n  }\n\n  /**\n   * Sets the label of the graph.\n   */\n  setGraph(label) {\n    this.#label = label;\n    return this;\n  }\n\n  /**\n   * Gets the graph label.\n   */\n  graph() {\n    return this.#label;\n  }\n\n\n  /* === Node functions ========== */\n\n  /**\n   * Sets the default node label. If newDefault is a function, it will be\n   * invoked ach time when setting a label for a node. Otherwise, this label\n   * will be assigned as default label in case if no label was specified while\n   * setting a node.\n   * Complexity: O(1).\n   */\n  setDefaultNodeLabel(newDefault) {\n    this.#defaultNodeLabelFn = newDefault;\n    if (typeof newDefault !== 'function') {\n      this.#defaultNodeLabelFn = () => newDefault;\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets the number of nodes in the graph.\n   * Complexity: O(1).\n   */\n  nodeCount() {\n    return this.#nodeCount;\n  }\n\n  /**\n   * Gets all nodes of the graph. Note, the in case of compound graph subnodes are\n   * not included in list.\n   * Complexity: O(1).\n   */\n  nodes() {\n    return Object.keys(this.#nodes);\n  }\n\n  /**\n   * Gets list of nodes without in-edges.\n   * Complexity: O(|V|).\n   */\n  sources() {\n    var self = this;\n    return this.nodes().filter(v => Object.keys(self.#in[v]).length === 0);\n  }\n\n  /**\n   * Gets list of nodes without out-edges.\n   * Complexity: O(|V|).\n   */\n  sinks() {\n    var self = this;\n    return this.nodes().filter(v => Object.keys(self.#out[v]).length === 0);\n  }\n\n  /**\n   * Invokes setNode method for each node in names list.\n   * Complexity: O(|names|).\n   */\n  setNodes(vs, value) {\n    var args = arguments;\n    var self = this;\n    vs.forEach(function(v) {\n      if (args.length > 1) {\n        self.setNode(v, value);\n      } else {\n        self.setNode(v);\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Creates or updates the value for the node v in the graph. If label is supplied\n   * it is set as the value for the node. If label is not supplied and the node was\n   * created by this call then the default node label will be assigned.\n   * Complexity: O(1).\n   */\n  setNode(v, value) {\n    if (this.#nodes.hasOwnProperty(v)) {\n      if (arguments.length > 1) {\n        this.#nodes[v] = value;\n      }\n      return this;\n    }\n\n    this.#nodes[v] = arguments.length > 1 ? value : this.#defaultNodeLabelFn(v);\n    if (this.#isCompound) {\n      this.#parent[v] = GRAPH_NODE;\n      this.#children[v] = {};\n      this.#children[GRAPH_NODE][v] = true;\n    }\n    this.#in[v] = {};\n    this.#preds[v] = {};\n    this.#out[v] = {};\n    this.#sucs[v] = {};\n    ++this.#nodeCount;\n    return this;\n  }\n\n  /**\n   * Gets the label of node with specified name.\n   * Complexity: O(|V|).\n   */\n  node(v) {\n    return this.#nodes[v];\n  }\n\n  /**\n   * Detects whether graph has a node with specified name or not.\n   */\n  hasNode(v) {\n    return this.#nodes.hasOwnProperty(v);\n  }\n\n  /**\n   * Remove the node with the name from the graph or do nothing if the node is not in\n   * the graph. If the node was removed this function also removes any incident\n   * edges.\n   * Complexity: O(1).\n   */\n  removeNode(v) {\n    var self = this;\n    if (this.#nodes.hasOwnProperty(v)) {\n      var removeEdge = e => self.removeEdge(self.#edgeObjs[e]);\n      delete this.#nodes[v];\n      if (this.#isCompound) {\n        this.#removeFromParentsChildList(v);\n        delete this.#parent[v];\n        this.children(v).forEach(function(child) {\n          self.setParent(child);\n        });\n        delete this.#children[v];\n      }\n      Object.keys(this.#in[v]).forEach(removeEdge);\n      delete this.#in[v];\n      delete this.#preds[v];\n      Object.keys(this.#out[v]).forEach(removeEdge);\n      delete this.#out[v];\n      delete this.#sucs[v];\n      --this.#nodeCount;\n    }\n    return this;\n  }\n\n  /**\n   * Sets node p as a parent for node v if it is defined, or removes the\n   * parent for v if p is undefined. Method throws an exception in case of\n   * invoking it in context of noncompound graph.\n   * Average-case complexity: O(1).\n   */\n  setParent(v, parent) {\n    if (!this.#isCompound) {\n      throw new Error(\"Cannot set parent in a non-compound graph\");\n    }\n\n    if (parent === undefined) {\n      parent = GRAPH_NODE;\n    } else {\n      // Coerce parent to string\n      parent += \"\";\n      for (var ancestor = parent; ancestor !== undefined; ancestor = this.parent(ancestor)) {\n        if (ancestor === v) {\n          throw new Error(\"Setting \" + parent+ \" as parent of \" + v +\n              \" would create a cycle\");\n        }\n      }\n\n      this.setNode(parent);\n    }\n\n    this.setNode(v);\n    this.#removeFromParentsChildList(v);\n    this.#parent[v] = parent;\n    this.#children[parent][v] = true;\n    return this;\n  }\n\n  #removeFromParentsChildList(v) {\n    delete this.#children[this.#parent[v]][v];\n  }\n\n  /**\n   * Gets parent node for node v.\n   * Complexity: O(1).\n   */\n  parent(v) {\n    if (this.#isCompound) {\n      var parent = this.#parent[v];\n      if (parent !== GRAPH_NODE) {\n        return parent;\n      }\n    }\n  }\n\n  /**\n   * Gets list of direct children of node v.\n   * Complexity: O(1).\n   */\n  children(v = GRAPH_NODE) {\n    if (this.#isCompound) {\n      var children = this.#children[v];\n      if (children) {\n        return Object.keys(children);\n      }\n    } else if (v === GRAPH_NODE) {\n      return this.nodes();\n    } else if (this.hasNode(v)) {\n      return [];\n    }\n  }\n\n  /**\n   * Return all nodes that are predecessors of the specified node or undefined if node v is not in\n   * the graph. Behavior is undefined for undirected graphs - use neighbors instead.\n   * Complexity: O(|V|).\n   */\n  predecessors(v) {\n    var predsV = this.#preds[v];\n    if (predsV) {\n      return Object.keys(predsV);\n    }\n  }\n\n  /**\n   * Return all nodes that are successors of the specified node or undefined if node v is not in\n   * the graph. Behavior is undefined for undirected graphs - use neighbors instead.\n   * Complexity: O(|V|).\n   */\n  successors(v) {\n    var sucsV = this.#sucs[v];\n    if (sucsV) {\n      return Object.keys(sucsV);\n    }\n  }\n\n  /**\n   * Return all nodes that are predecessors or successors of the specified node or undefined if\n   * node v is not in the graph.\n   * Complexity: O(|V|).\n   */\n  neighbors(v) {\n    var preds = this.predecessors(v);\n    if (preds) {\n      const union = new Set(preds);\n      for (var succ of this.successors(v)) {\n        union.add(succ);\n      }\n\n      return Array.from(union.values());\n    }\n  }\n\n  isLeaf(v) {\n    var neighbors;\n    if (this.isDirected()) {\n      neighbors = this.successors(v);\n    } else {\n      neighbors = this.neighbors(v);\n    }\n    return neighbors.length === 0;\n  }\n\n  /**\n   * Creates new graph with nodes filtered via filter. Edges incident to rejected node\n   * are also removed. In case of compound graph, if parent is rejected by filter,\n   * than all its children are rejected too.\n   * Average-case complexity: O(|E|+|V|).\n   */\n  filterNodes(filter) {\n    var copy = new this.constructor({\n      directed: this.#isDirected,\n      multigraph: this.#isMultigraph,\n      compound: this.#isCompound\n    });\n\n    copy.setGraph(this.graph());\n\n    var self = this;\n    Object.entries(this.#nodes).forEach(function([v, value]) {\n      if (filter(v)) {\n        copy.setNode(v, value);\n      }\n    });\n\n    Object.values(this.#edgeObjs).forEach(function(e) {\n      if (copy.hasNode(e.v) && copy.hasNode(e.w)) {\n        copy.setEdge(e, self.edge(e));\n      }\n    });\n\n    var parents = {};\n    function findParent(v) {\n      var parent = self.parent(v);\n      if (parent === undefined || copy.hasNode(parent)) {\n        parents[v] = parent;\n        return parent;\n      } else if (parent in parents) {\n        return parents[parent];\n      } else {\n        return findParent(parent);\n      }\n    }\n\n    if (this.#isCompound) {\n      copy.nodes().forEach(v => copy.setParent(v, findParent(v)));\n    }\n\n    return copy;\n  }\n\n  /* === Edge functions ========== */\n\n  /**\n   * Sets the default edge label or factory function. This label will be\n   * assigned as default label in case if no label was specified while setting\n   * an edge or this function will be invoked each time when setting an edge\n   * with no label specified and returned value * will be used as a label for edge.\n   * Complexity: O(1).\n   */\n  setDefaultEdgeLabel(newDefault) {\n    this.#defaultEdgeLabelFn = newDefault;\n    if (typeof newDefault !== 'function') {\n      this.#defaultEdgeLabelFn = () => newDefault;\n    }\n\n    return this;\n  }\n\n  /**\n   * Gets the number of edges in the graph.\n   * Complexity: O(1).\n   */\n  edgeCount() {\n    return this.#edgeCount;\n  }\n\n  /**\n   * Gets edges of the graph. In case of compound graph subgraphs are not considered.\n   * Complexity: O(|E|).\n   */\n  edges() {\n    return Object.values(this.#edgeObjs);\n  }\n\n  /**\n   * Establish an edges path over the nodes in nodes list. If some edge is already\n   * exists, it will update its label, otherwise it will create an edge between pair\n   * of nodes with label provided or default label if no label provided.\n   * Complexity: O(|nodes|).\n   */\n  setPath(vs, value) {\n    var self = this;\n    var args = arguments;\n    vs.reduce(function(v, w) {\n      if (args.length > 1) {\n        self.setEdge(v, w, value);\n      } else {\n        self.setEdge(v, w);\n      }\n      return w;\n    });\n    return this;\n  }\n\n  /**\n   * Creates or updates the label for the edge (v, w) with the optionally supplied\n   * name. If label is supplied it is set as the value for the edge. If label is not\n   * supplied and the edge was created by this call then the default edge label will\n   * be assigned. The name parameter is only useful with multigraphs.\n   */\n  setEdge() {\n    var v, w, name, value;\n    var valueSpecified = false;\n    var arg0 = arguments[0];\n\n    if (typeof arg0 === \"object\" && arg0 !== null && \"v\" in arg0) {\n      v = arg0.v;\n      w = arg0.w;\n      name = arg0.name;\n      if (arguments.length === 2) {\n        value = arguments[1];\n        valueSpecified = true;\n      }\n    } else {\n      v = arg0;\n      w = arguments[1];\n      name = arguments[3];\n      if (arguments.length > 2) {\n        value = arguments[2];\n        valueSpecified = true;\n      }\n    }\n\n    v = \"\" + v;\n    w = \"\" + w;\n    if (name !== undefined) {\n      name = \"\" + name;\n    }\n\n    var e = edgeArgsToId(this.#isDirected, v, w, name);\n    if (this.#edgeLabels.hasOwnProperty(e)) {\n      if (valueSpecified) {\n        this.#edgeLabels[e] = value;\n      }\n      return this;\n    }\n\n    if (name !== undefined && !this.#isMultigraph) {\n      throw new Error(\"Cannot set a named edge when isMultigraph = false\");\n    }\n\n    // It didn't exist, so we need to create it.\n    // First ensure the nodes exist.\n    this.setNode(v);\n    this.setNode(w);\n\n    this.#edgeLabels[e] = valueSpecified ? value : this.#defaultEdgeLabelFn(v, w, name);\n\n    var edgeObj = edgeArgsToObj(this.#isDirected, v, w, name);\n    // Ensure we add undirected edges in a consistent way.\n    v = edgeObj.v;\n    w = edgeObj.w;\n\n    Object.freeze(edgeObj);\n    this.#edgeObjs[e] = edgeObj;\n    incrementOrInitEntry(this.#preds[w], v);\n    incrementOrInitEntry(this.#sucs[v], w);\n    this.#in[w][e] = edgeObj;\n    this.#out[v][e] = edgeObj;\n    this.#edgeCount++;\n    return this;\n  }\n\n  /**\n   * Gets the label for the specified edge.\n   * Complexity: O(1).\n   */\n  edge(v, w, name) {\n    var e = (arguments.length === 1\n      ? edgeObjToId(this.#isDirected, arguments[0])\n      : edgeArgsToId(this.#isDirected, v, w, name));\n    return this.#edgeLabels[e];\n  }\n\n  /**\n   * Gets the label for the specified edge and converts it to an object.\n   * Complexity: O(1)\n   */\n  edgeAsObj() {\n    const edge = this.edge(...arguments);\n    if (typeof edge !== \"object\") {\n      return {label: edge};\n    }\n\n    return edge;\n  }\n\n  /**\n   * Detects whether the graph contains specified edge or not. No subgraphs are considered.\n   * Complexity: O(1).\n   */\n  hasEdge(v, w, name) {\n    var e = (arguments.length === 1\n      ? edgeObjToId(this.#isDirected, arguments[0])\n      : edgeArgsToId(this.#isDirected, v, w, name));\n    return this.#edgeLabels.hasOwnProperty(e);\n  }\n\n  /**\n   * Removes the specified edge from the graph. No subgraphs are considered.\n   * Complexity: O(1).\n   */\n  removeEdge(v, w, name) {\n    var e = (arguments.length === 1\n      ? edgeObjToId(this.#isDirected, arguments[0])\n      : edgeArgsToId(this.#isDirected, v, w, name));\n    var edge = this.#edgeObjs[e];\n    if (edge) {\n      v = edge.v;\n      w = edge.w;\n      delete this.#edgeLabels[e];\n      delete this.#edgeObjs[e];\n      decrementOrRemoveEntry(this.#preds[w], v);\n      decrementOrRemoveEntry(this.#sucs[v], w);\n      delete this.#in[w][e];\n      delete this.#out[v][e];\n      this.#edgeCount--;\n    }\n    return this;\n  }\n\n  /**\n   * Return all edges that point to the node v. Optionally filters those edges down to just those\n   * coming from node u. Behavior is undefined for undirected graphs - use nodeEdges instead.\n   * Complexity: O(|E|).\n   */\n  inEdges(v, u) {\n    var inV = this.#in[v];\n    if (inV) {\n      var edges = Object.values(inV);\n      if (!u) {\n        return edges;\n      }\n      return edges.filter(edge => edge.v === u);\n    }\n  }\n\n  /**\n   * Return all edges that are pointed at by node v. Optionally filters those edges down to just\n   * those point to w. Behavior is undefined for undirected graphs - use nodeEdges instead.\n   * Complexity: O(|E|).\n   */\n  outEdges(v, w) {\n    var outV = this.#out[v];\n    if (outV) {\n      var edges = Object.values(outV);\n      if (!w) {\n        return edges;\n      }\n      return edges.filter(edge => edge.w === w);\n    }\n  }\n\n  /**\n   * Returns all edges to or from node v regardless of direction. Optionally filters those edges\n   * down to just those between nodes v and w regardless of direction.\n   * Complexity: O(|E|).\n   */\n  nodeEdges(v, w) {\n    var inEdges = this.inEdges(v, w);\n    if (inEdges) {\n      return inEdges.concat(this.outEdges(v, w));\n    }\n  }\n}\n\nfunction incrementOrInitEntry(map, k) {\n  if (map[k]) {\n    map[k]++;\n  } else {\n    map[k] = 1;\n  }\n}\n\nfunction decrementOrRemoveEntry(map, k) {\n  if (!--map[k]) { delete map[k]; }\n}\n\nfunction edgeArgsToId(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +\n             (name === undefined ? DEFAULT_EDGE_NAME : name);\n}\n\nfunction edgeArgsToObj(isDirected, v_, w_, name) {\n  var v = \"\" + v_;\n  var w = \"\" + w_;\n  if (!isDirected && v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  var edgeObj =  { v: v, w: w };\n  if (name) {\n    edgeObj.name = name;\n  }\n  return edgeObj;\n}\n\nfunction edgeObjToId(isDirected, edgeObj) {\n  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);\n}\n\nmodule.exports = Graph;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,iBAAiB,GAAG,MAAM;AAC9B,IAAIC,UAAU,GAAG,MAAM;AACvB,IAAIC,cAAc,GAAG,MAAM;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,KAAK,CAAC;EACV,CAACC,UAAU,GAAG,IAAI;EAClB,CAACC,YAAY,GAAG,KAAK;EACrB,CAACC,UAAU,GAAG,KAAK;;EAEnB;EACA,CAACC,KAAK;;EAEN;EACA,CAACC,kBAAkB,GAAGC,CAAA,KAAMC,SAAS;;EAErC;EACA,CAACC,kBAAkB,GAAGC,CAAA,KAAMF,SAAS;;EAErC;EACA,CAACG,KAAK,GAAG,CAAC,CAAC;;EAEX;EACA,CAACC,EAAE,GAAG,CAAC,CAAC;;EAER;EACA,CAACC,KAAK,GAAG,CAAC,CAAC;;EAEX;EACA,CAACC,GAAG,GAAG,CAAC,CAAC;;EAET;EACA,CAACC,IAAI,GAAG,CAAC,CAAC;;EAEV;EACA,CAACC,QAAQ,GAAG,CAAC,CAAC;;EAEd;EACA,CAACC,UAAU,GAAG,CAAC,CAAC;;EAEhB;EACA,CAACC,SAAS,GAAG,CAAC;;EAEd;EACA,CAACC,SAAS,GAAG,CAAC;EAEd,CAACC,MAAM;EAEP,CAACC,QAAQ;EAETC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAIA,IAAI,EAAE;MACR,IAAI,CAAC,CAACrB,UAAU,GAAGqB,IAAI,CAACC,cAAc,CAAC,UAAU,CAAC,GAAGD,IAAI,CAACE,QAAQ,GAAG,IAAI;MACzE,IAAI,CAAC,CAACtB,YAAY,GAAGoB,IAAI,CAACC,cAAc,CAAC,YAAY,CAAC,GAAGD,IAAI,CAACG,UAAU,GAAG,KAAK;MAChF,IAAI,CAAC,CAACtB,UAAU,GAAGmB,IAAI,CAACC,cAAc,CAAC,UAAU,CAAC,GAAGD,IAAI,CAACI,QAAQ,GAAG,KAAK;IAC5E;IAEA,IAAI,IAAI,CAAC,CAACvB,UAAU,EAAE;MACpB;MACA,IAAI,CAAC,CAACgB,MAAM,GAAG,CAAC,CAAC;;MAEjB;MACA,IAAI,CAAC,CAACC,QAAQ,GAAG,CAAC,CAAC;MACnB,IAAI,CAAC,CAACA,QAAQ,CAACtB,UAAU,CAAC,GAAG,CAAC,CAAC;IACjC;EACF;;EAEA;;EAEA;AACF;AACA;EACEG,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC,CAACA,UAAU;EACzB;;EAEA;AACF;AACA;EACEC,YAAYA,CAAA,EAAG;IACb,OAAO,IAAI,CAAC,CAACA,YAAY;EAC3B;;EAEA;AACF;AACA;EACEC,UAAUA,CAAA,EAAG;IACX,OAAO,IAAI,CAAC,CAACA,UAAU;EACzB;;EAEA;AACF;AACA;EACEwB,QAAQA,CAACvB,KAAK,EAAE;IACd,IAAI,CAAC,CAACA,KAAK,GAAGA,KAAK;IACnB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEwB,KAAKA,CAAA,EAAG;IACN,OAAO,IAAI,CAAC,CAACxB,KAAK;EACpB;;EAGA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEyB,mBAAmBA,CAACC,UAAU,EAAE;IAC9B,IAAI,CAAC,CAACzB,kBAAkB,GAAGyB,UAAU;IACrC,IAAI,OAAOA,UAAU,KAAK,UAAU,EAAE;MACpC,IAAI,CAAC,CAACzB,kBAAkB,GAAG,MAAMyB,UAAU;IAC7C;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACEb,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC,CAACA,SAAS;EACxB;;EAEA;AACF;AACA;AACA;AACA;EACEP,KAAKA,CAAA,EAAG;IACN,OAAOqB,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAACtB,KAAK,CAAC;EACjC;;EAEA;AACF;AACA;AACA;EACEuB,OAAOA,CAAA,EAAG;IACR,IAAIC,IAAI,GAAG,IAAI;IACf,OAAO,IAAI,CAACxB,KAAK,CAAC,CAAC,CAACyB,MAAM,CAACC,CAAC,IAAIL,MAAM,CAACC,IAAI,CAACE,IAAI,CAAC,CAACvB,EAAE,CAACyB,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,CAAC;EACxE;;EAEA;AACF;AACA;AACA;EACEC,KAAKA,CAAA,EAAG;IACN,IAAIJ,IAAI,GAAG,IAAI;IACf,OAAO,IAAI,CAACxB,KAAK,CAAC,CAAC,CAACyB,MAAM,CAACC,CAAC,IAAIL,MAAM,CAACC,IAAI,CAACE,IAAI,CAAC,CAACrB,GAAG,CAACuB,CAAC,CAAC,CAAC,CAACC,MAAM,KAAK,CAAC,CAAC;EACzE;;EAEA;AACF;AACA;AACA;EACEE,QAAQA,CAACC,EAAE,EAAEC,KAAK,EAAE;IAClB,IAAIC,IAAI,GAAGC,SAAS;IACpB,IAAIT,IAAI,GAAG,IAAI;IACfM,EAAE,CAACI,OAAO,CAAC,UAASR,CAAC,EAAE;MACrB,IAAIM,IAAI,CAACL,MAAM,GAAG,CAAC,EAAE;QACnBH,IAAI,CAACW,OAAO,CAACT,CAAC,EAAEK,KAAK,CAAC;MACxB,CAAC,MAAM;QACLP,IAAI,CAACW,OAAO,CAACT,CAAC,CAAC;MACjB;IACF,CAAC,CAAC;IACF,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACES,OAAOA,CAACT,CAAC,EAAEK,KAAK,EAAE;IAChB,IAAI,IAAI,CAAC,CAAC/B,KAAK,CAACa,cAAc,CAACa,CAAC,CAAC,EAAE;MACjC,IAAIO,SAAS,CAACN,MAAM,GAAG,CAAC,EAAE;QACxB,IAAI,CAAC,CAAC3B,KAAK,CAAC0B,CAAC,CAAC,GAAGK,KAAK;MACxB;MACA,OAAO,IAAI;IACb;IAEA,IAAI,CAAC,CAAC/B,KAAK,CAAC0B,CAAC,CAAC,GAAGO,SAAS,CAACN,MAAM,GAAG,CAAC,GAAGI,KAAK,GAAG,IAAI,CAAC,CAACpC,kBAAkB,CAAC+B,CAAC,CAAC;IAC3E,IAAI,IAAI,CAAC,CAACjC,UAAU,EAAE;MACpB,IAAI,CAAC,CAACgB,MAAM,CAACiB,CAAC,CAAC,GAAGtC,UAAU;MAC5B,IAAI,CAAC,CAACsB,QAAQ,CAACgB,CAAC,CAAC,GAAG,CAAC,CAAC;MACtB,IAAI,CAAC,CAAChB,QAAQ,CAACtB,UAAU,CAAC,CAACsC,CAAC,CAAC,GAAG,IAAI;IACtC;IACA,IAAI,CAAC,CAACzB,EAAE,CAACyB,CAAC,CAAC,GAAG,CAAC,CAAC;IAChB,IAAI,CAAC,CAACxB,KAAK,CAACwB,CAAC,CAAC,GAAG,CAAC,CAAC;IACnB,IAAI,CAAC,CAACvB,GAAG,CAACuB,CAAC,CAAC,GAAG,CAAC,CAAC;IACjB,IAAI,CAAC,CAACtB,IAAI,CAACsB,CAAC,CAAC,GAAG,CAAC,CAAC;IAClB,EAAE,IAAI,CAAC,CAACnB,SAAS;IACjB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACE6B,IAAIA,CAACV,CAAC,EAAE;IACN,OAAO,IAAI,CAAC,CAAC1B,KAAK,CAAC0B,CAAC,CAAC;EACvB;;EAEA;AACF;AACA;EACEW,OAAOA,CAACX,CAAC,EAAE;IACT,OAAO,IAAI,CAAC,CAAC1B,KAAK,CAACa,cAAc,CAACa,CAAC,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEY,UAAUA,CAACZ,CAAC,EAAE;IACZ,IAAIF,IAAI,GAAG,IAAI;IACf,IAAI,IAAI,CAAC,CAACxB,KAAK,CAACa,cAAc,CAACa,CAAC,CAAC,EAAE;MACjC,IAAIa,UAAU,GAAGC,CAAC,IAAIhB,IAAI,CAACe,UAAU,CAACf,IAAI,CAAC,CAACnB,QAAQ,CAACmC,CAAC,CAAC,CAAC;MACxD,OAAO,IAAI,CAAC,CAACxC,KAAK,CAAC0B,CAAC,CAAC;MACrB,IAAI,IAAI,CAAC,CAACjC,UAAU,EAAE;QACpB,IAAI,CAAC,CAACgD,0BAA0B,CAACf,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC,CAACjB,MAAM,CAACiB,CAAC,CAAC;QACtB,IAAI,CAAChB,QAAQ,CAACgB,CAAC,CAAC,CAACQ,OAAO,CAAC,UAASQ,KAAK,EAAE;UACvClB,IAAI,CAACmB,SAAS,CAACD,KAAK,CAAC;QACvB,CAAC,CAAC;QACF,OAAO,IAAI,CAAC,CAAChC,QAAQ,CAACgB,CAAC,CAAC;MAC1B;MACAL,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAACrB,EAAE,CAACyB,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACK,UAAU,CAAC;MAC5C,OAAO,IAAI,CAAC,CAACtC,EAAE,CAACyB,CAAC,CAAC;MAClB,OAAO,IAAI,CAAC,CAACxB,KAAK,CAACwB,CAAC,CAAC;MACrBL,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC,CAACnB,GAAG,CAACuB,CAAC,CAAC,CAAC,CAACQ,OAAO,CAACK,UAAU,CAAC;MAC7C,OAAO,IAAI,CAAC,CAACpC,GAAG,CAACuB,CAAC,CAAC;MACnB,OAAO,IAAI,CAAC,CAACtB,IAAI,CAACsB,CAAC,CAAC;MACpB,EAAE,IAAI,CAAC,CAACnB,SAAS;IACnB;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEoC,SAASA,CAACjB,CAAC,EAAEjB,MAAM,EAAE;IACnB,IAAI,CAAC,IAAI,CAAC,CAAChB,UAAU,EAAE;MACrB,MAAM,IAAImD,KAAK,CAAC,2CAA2C,CAAC;IAC9D;IAEA,IAAInC,MAAM,KAAKZ,SAAS,EAAE;MACxBY,MAAM,GAAGrB,UAAU;IACrB,CAAC,MAAM;MACL;MACAqB,MAAM,IAAI,EAAE;MACZ,KAAK,IAAIoC,QAAQ,GAAGpC,MAAM,EAAEoC,QAAQ,KAAKhD,SAAS,EAAEgD,QAAQ,GAAG,IAAI,CAACpC,MAAM,CAACoC,QAAQ,CAAC,EAAE;QACpF,IAAIA,QAAQ,KAAKnB,CAAC,EAAE;UAClB,MAAM,IAAIkB,KAAK,CAAC,UAAU,GAAGnC,MAAM,GAAE,gBAAgB,GAAGiB,CAAC,GACrD,uBAAuB,CAAC;QAC9B;MACF;MAEA,IAAI,CAACS,OAAO,CAAC1B,MAAM,CAAC;IACtB;IAEA,IAAI,CAAC0B,OAAO,CAACT,CAAC,CAAC;IACf,IAAI,CAAC,CAACe,0BAA0B,CAACf,CAAC,CAAC;IACnC,IAAI,CAAC,CAACjB,MAAM,CAACiB,CAAC,CAAC,GAAGjB,MAAM;IACxB,IAAI,CAAC,CAACC,QAAQ,CAACD,MAAM,CAAC,CAACiB,CAAC,CAAC,GAAG,IAAI;IAChC,OAAO,IAAI;EACb;EAEA,CAACe,0BAA0BK,CAACpB,CAAC,EAAE;IAC7B,OAAO,IAAI,CAAC,CAAChB,QAAQ,CAAC,IAAI,CAAC,CAACD,MAAM,CAACiB,CAAC,CAAC,CAAC,CAACA,CAAC,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;EACEjB,MAAMA,CAACiB,CAAC,EAAE;IACR,IAAI,IAAI,CAAC,CAACjC,UAAU,EAAE;MACpB,IAAIgB,MAAM,GAAG,IAAI,CAAC,CAACA,MAAM,CAACiB,CAAC,CAAC;MAC5B,IAAIjB,MAAM,KAAKrB,UAAU,EAAE;QACzB,OAAOqB,MAAM;MACf;IACF;EACF;;EAEA;AACF;AACA;AACA;EACEC,QAAQA,CAACgB,CAAC,GAAGtC,UAAU,EAAE;IACvB,IAAI,IAAI,CAAC,CAACK,UAAU,EAAE;MACpB,IAAIiB,QAAQ,GAAG,IAAI,CAAC,CAACA,QAAQ,CAACgB,CAAC,CAAC;MAChC,IAAIhB,QAAQ,EAAE;QACZ,OAAOW,MAAM,CAACC,IAAI,CAACZ,QAAQ,CAAC;MAC9B;IACF,CAAC,MAAM,IAAIgB,CAAC,KAAKtC,UAAU,EAAE;MAC3B,OAAO,IAAI,CAACY,KAAK,CAAC,CAAC;IACrB,CAAC,MAAM,IAAI,IAAI,CAACqC,OAAO,CAACX,CAAC,CAAC,EAAE;MAC1B,OAAO,EAAE;IACX;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEqB,YAAYA,CAACrB,CAAC,EAAE;IACd,IAAIsB,MAAM,GAAG,IAAI,CAAC,CAAC9C,KAAK,CAACwB,CAAC,CAAC;IAC3B,IAAIsB,MAAM,EAAE;MACV,OAAO3B,MAAM,CAACC,IAAI,CAAC0B,MAAM,CAAC;IAC5B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEC,UAAUA,CAACvB,CAAC,EAAE;IACZ,IAAIwB,KAAK,GAAG,IAAI,CAAC,CAAC9C,IAAI,CAACsB,CAAC,CAAC;IACzB,IAAIwB,KAAK,EAAE;MACT,OAAO7B,MAAM,CAACC,IAAI,CAAC4B,KAAK,CAAC;IAC3B;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEC,SAASA,CAACzB,CAAC,EAAE;IACX,IAAIxB,KAAK,GAAG,IAAI,CAAC6C,YAAY,CAACrB,CAAC,CAAC;IAChC,IAAIxB,KAAK,EAAE;MACT,MAAMkD,KAAK,GAAG,IAAIC,GAAG,CAACnD,KAAK,CAAC;MAC5B,KAAK,IAAIoD,IAAI,IAAI,IAAI,CAACL,UAAU,CAACvB,CAAC,CAAC,EAAE;QACnC0B,KAAK,CAACG,GAAG,CAACD,IAAI,CAAC;MACjB;MAEA,OAAOE,KAAK,CAACC,IAAI,CAACL,KAAK,CAACM,MAAM,CAAC,CAAC,CAAC;IACnC;EACF;EAEAC,MAAMA,CAACjC,CAAC,EAAE;IACR,IAAIyB,SAAS;IACb,IAAI,IAAI,CAAC5D,UAAU,CAAC,CAAC,EAAE;MACrB4D,SAAS,GAAG,IAAI,CAACF,UAAU,CAACvB,CAAC,CAAC;IAChC,CAAC,MAAM;MACLyB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACzB,CAAC,CAAC;IAC/B;IACA,OAAOyB,SAAS,CAACxB,MAAM,KAAK,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEiC,WAAWA,CAACnC,MAAM,EAAE;IAClB,IAAIoC,IAAI,GAAG,IAAI,IAAI,CAAClD,WAAW,CAAC;MAC9BG,QAAQ,EAAE,IAAI,CAAC,CAACvB,UAAU;MAC1BwB,UAAU,EAAE,IAAI,CAAC,CAACvB,YAAY;MAC9BwB,QAAQ,EAAE,IAAI,CAAC,CAACvB;IAClB,CAAC,CAAC;IAEFoE,IAAI,CAAC5C,QAAQ,CAAC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC;IAE3B,IAAIM,IAAI,GAAG,IAAI;IACfH,MAAM,CAACyC,OAAO,CAAC,IAAI,CAAC,CAAC9D,KAAK,CAAC,CAACkC,OAAO,CAAC,UAAS,CAACR,CAAC,EAAEK,KAAK,CAAC,EAAE;MACvD,IAAIN,MAAM,CAACC,CAAC,CAAC,EAAE;QACbmC,IAAI,CAAC1B,OAAO,CAACT,CAAC,EAAEK,KAAK,CAAC;MACxB;IACF,CAAC,CAAC;IAEFV,MAAM,CAACqC,MAAM,CAAC,IAAI,CAAC,CAACrD,QAAQ,CAAC,CAAC6B,OAAO,CAAC,UAASM,CAAC,EAAE;MAChD,IAAIqB,IAAI,CAACxB,OAAO,CAACG,CAAC,CAACd,CAAC,CAAC,IAAImC,IAAI,CAACxB,OAAO,CAACG,CAAC,CAACuB,CAAC,CAAC,EAAE;QAC1CF,IAAI,CAACG,OAAO,CAACxB,CAAC,EAAEhB,IAAI,CAACyC,IAAI,CAACzB,CAAC,CAAC,CAAC;MAC/B;IACF,CAAC,CAAC;IAEF,IAAI0B,OAAO,GAAG,CAAC,CAAC;IAChB,SAASC,UAAUA,CAACzC,CAAC,EAAE;MACrB,IAAIjB,MAAM,GAAGe,IAAI,CAACf,MAAM,CAACiB,CAAC,CAAC;MAC3B,IAAIjB,MAAM,KAAKZ,SAAS,IAAIgE,IAAI,CAACxB,OAAO,CAAC5B,MAAM,CAAC,EAAE;QAChDyD,OAAO,CAACxC,CAAC,CAAC,GAAGjB,MAAM;QACnB,OAAOA,MAAM;MACf,CAAC,MAAM,IAAIA,MAAM,IAAIyD,OAAO,EAAE;QAC5B,OAAOA,OAAO,CAACzD,MAAM,CAAC;MACxB,CAAC,MAAM;QACL,OAAO0D,UAAU,CAAC1D,MAAM,CAAC;MAC3B;IACF;IAEA,IAAI,IAAI,CAAC,CAAChB,UAAU,EAAE;MACpBoE,IAAI,CAAC7D,KAAK,CAAC,CAAC,CAACkC,OAAO,CAACR,CAAC,IAAImC,IAAI,CAAClB,SAAS,CAACjB,CAAC,EAAEyC,UAAU,CAACzC,CAAC,CAAC,CAAC,CAAC;IAC7D;IAEA,OAAOmC,IAAI;EACb;;EAEA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEO,mBAAmBA,CAAChD,UAAU,EAAE;IAC9B,IAAI,CAAC,CAACtB,kBAAkB,GAAGsB,UAAU;IACrC,IAAI,OAAOA,UAAU,KAAK,UAAU,EAAE;MACpC,IAAI,CAAC,CAACtB,kBAAkB,GAAG,MAAMsB,UAAU;IAC7C;IAEA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACEZ,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAAC,CAACA,SAAS;EACxB;;EAEA;AACF;AACA;AACA;EACE6D,KAAKA,CAAA,EAAG;IACN,OAAOhD,MAAM,CAACqC,MAAM,CAAC,IAAI,CAAC,CAACrD,QAAQ,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEiE,OAAOA,CAACxC,EAAE,EAAEC,KAAK,EAAE;IACjB,IAAIP,IAAI,GAAG,IAAI;IACf,IAAIQ,IAAI,GAAGC,SAAS;IACpBH,EAAE,CAACyC,MAAM,CAAC,UAAS7C,CAAC,EAAEqC,CAAC,EAAE;MACvB,IAAI/B,IAAI,CAACL,MAAM,GAAG,CAAC,EAAE;QACnBH,IAAI,CAACwC,OAAO,CAACtC,CAAC,EAAEqC,CAAC,EAAEhC,KAAK,CAAC;MAC3B,CAAC,MAAM;QACLP,IAAI,CAACwC,OAAO,CAACtC,CAAC,EAAEqC,CAAC,CAAC;MACpB;MACA,OAAOA,CAAC;IACV,CAAC,CAAC;IACF,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,OAAOA,CAAA,EAAG;IACR,IAAItC,CAAC,EAAEqC,CAAC,EAAES,IAAI,EAAEzC,KAAK;IACrB,IAAI0C,cAAc,GAAG,KAAK;IAC1B,IAAIC,IAAI,GAAGzC,SAAS,CAAC,CAAC,CAAC;IAEvB,IAAI,OAAOyC,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,IAAI,GAAG,IAAIA,IAAI,EAAE;MAC5DhD,CAAC,GAAGgD,IAAI,CAAChD,CAAC;MACVqC,CAAC,GAAGW,IAAI,CAACX,CAAC;MACVS,IAAI,GAAGE,IAAI,CAACF,IAAI;MAChB,IAAIvC,SAAS,CAACN,MAAM,KAAK,CAAC,EAAE;QAC1BI,KAAK,GAAGE,SAAS,CAAC,CAAC,CAAC;QACpBwC,cAAc,GAAG,IAAI;MACvB;IACF,CAAC,MAAM;MACL/C,CAAC,GAAGgD,IAAI;MACRX,CAAC,GAAG9B,SAAS,CAAC,CAAC,CAAC;MAChBuC,IAAI,GAAGvC,SAAS,CAAC,CAAC,CAAC;MACnB,IAAIA,SAAS,CAACN,MAAM,GAAG,CAAC,EAAE;QACxBI,KAAK,GAAGE,SAAS,CAAC,CAAC,CAAC;QACpBwC,cAAc,GAAG,IAAI;MACvB;IACF;IAEA/C,CAAC,GAAG,EAAE,GAAGA,CAAC;IACVqC,CAAC,GAAG,EAAE,GAAGA,CAAC;IACV,IAAIS,IAAI,KAAK3E,SAAS,EAAE;MACtB2E,IAAI,GAAG,EAAE,GAAGA,IAAI;IAClB;IAEA,IAAIhC,CAAC,GAAGmC,YAAY,CAAC,IAAI,CAAC,CAACpF,UAAU,EAAEmC,CAAC,EAAEqC,CAAC,EAAES,IAAI,CAAC;IAClD,IAAI,IAAI,CAAC,CAAClE,UAAU,CAACO,cAAc,CAAC2B,CAAC,CAAC,EAAE;MACtC,IAAIiC,cAAc,EAAE;QAClB,IAAI,CAAC,CAACnE,UAAU,CAACkC,CAAC,CAAC,GAAGT,KAAK;MAC7B;MACA,OAAO,IAAI;IACb;IAEA,IAAIyC,IAAI,KAAK3E,SAAS,IAAI,CAAC,IAAI,CAAC,CAACL,YAAY,EAAE;MAC7C,MAAM,IAAIoD,KAAK,CAAC,mDAAmD,CAAC;IACtE;;IAEA;IACA;IACA,IAAI,CAACT,OAAO,CAACT,CAAC,CAAC;IACf,IAAI,CAACS,OAAO,CAAC4B,CAAC,CAAC;IAEf,IAAI,CAAC,CAACzD,UAAU,CAACkC,CAAC,CAAC,GAAGiC,cAAc,GAAG1C,KAAK,GAAG,IAAI,CAAC,CAACjC,kBAAkB,CAAC4B,CAAC,EAAEqC,CAAC,EAAES,IAAI,CAAC;IAEnF,IAAII,OAAO,GAAGC,aAAa,CAAC,IAAI,CAAC,CAACtF,UAAU,EAAEmC,CAAC,EAAEqC,CAAC,EAAES,IAAI,CAAC;IACzD;IACA9C,CAAC,GAAGkD,OAAO,CAAClD,CAAC;IACbqC,CAAC,GAAGa,OAAO,CAACb,CAAC;IAEb1C,MAAM,CAACyD,MAAM,CAACF,OAAO,CAAC;IACtB,IAAI,CAAC,CAACvE,QAAQ,CAACmC,CAAC,CAAC,GAAGoC,OAAO;IAC3BG,oBAAoB,CAAC,IAAI,CAAC,CAAC7E,KAAK,CAAC6D,CAAC,CAAC,EAAErC,CAAC,CAAC;IACvCqD,oBAAoB,CAAC,IAAI,CAAC,CAAC3E,IAAI,CAACsB,CAAC,CAAC,EAAEqC,CAAC,CAAC;IACtC,IAAI,CAAC,CAAC9D,EAAE,CAAC8D,CAAC,CAAC,CAACvB,CAAC,CAAC,GAAGoC,OAAO;IACxB,IAAI,CAAC,CAACzE,GAAG,CAACuB,CAAC,CAAC,CAACc,CAAC,CAAC,GAAGoC,OAAO;IACzB,IAAI,CAAC,CAACpE,SAAS,EAAE;IACjB,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACEyD,IAAIA,CAACvC,CAAC,EAAEqC,CAAC,EAAES,IAAI,EAAE;IACf,IAAIhC,CAAC,GAAIP,SAAS,CAACN,MAAM,KAAK,CAAC,GAC3BqD,WAAW,CAAC,IAAI,CAAC,CAACzF,UAAU,EAAE0C,SAAS,CAAC,CAAC,CAAC,CAAC,GAC3C0C,YAAY,CAAC,IAAI,CAAC,CAACpF,UAAU,EAAEmC,CAAC,EAAEqC,CAAC,EAAES,IAAI,CAAE;IAC/C,OAAO,IAAI,CAAC,CAAClE,UAAU,CAACkC,CAAC,CAAC;EAC5B;;EAEA;AACF;AACA;AACA;EACEyC,SAASA,CAAA,EAAG;IACV,MAAMhB,IAAI,GAAG,IAAI,CAACA,IAAI,CAAC,GAAGhC,SAAS,CAAC;IACpC,IAAI,OAAOgC,IAAI,KAAK,QAAQ,EAAE;MAC5B,OAAO;QAACvE,KAAK,EAAEuE;MAAI,CAAC;IACtB;IAEA,OAAOA,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACEiB,OAAOA,CAACxD,CAAC,EAAEqC,CAAC,EAAES,IAAI,EAAE;IAClB,IAAIhC,CAAC,GAAIP,SAAS,CAACN,MAAM,KAAK,CAAC,GAC3BqD,WAAW,CAAC,IAAI,CAAC,CAACzF,UAAU,EAAE0C,SAAS,CAAC,CAAC,CAAC,CAAC,GAC3C0C,YAAY,CAAC,IAAI,CAAC,CAACpF,UAAU,EAAEmC,CAAC,EAAEqC,CAAC,EAAES,IAAI,CAAE;IAC/C,OAAO,IAAI,CAAC,CAAClE,UAAU,CAACO,cAAc,CAAC2B,CAAC,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;EACED,UAAUA,CAACb,CAAC,EAAEqC,CAAC,EAAES,IAAI,EAAE;IACrB,IAAIhC,CAAC,GAAIP,SAAS,CAACN,MAAM,KAAK,CAAC,GAC3BqD,WAAW,CAAC,IAAI,CAAC,CAACzF,UAAU,EAAE0C,SAAS,CAAC,CAAC,CAAC,CAAC,GAC3C0C,YAAY,CAAC,IAAI,CAAC,CAACpF,UAAU,EAAEmC,CAAC,EAAEqC,CAAC,EAAES,IAAI,CAAE;IAC/C,IAAIP,IAAI,GAAG,IAAI,CAAC,CAAC5D,QAAQ,CAACmC,CAAC,CAAC;IAC5B,IAAIyB,IAAI,EAAE;MACRvC,CAAC,GAAGuC,IAAI,CAACvC,CAAC;MACVqC,CAAC,GAAGE,IAAI,CAACF,CAAC;MACV,OAAO,IAAI,CAAC,CAACzD,UAAU,CAACkC,CAAC,CAAC;MAC1B,OAAO,IAAI,CAAC,CAACnC,QAAQ,CAACmC,CAAC,CAAC;MACxB2C,sBAAsB,CAAC,IAAI,CAAC,CAACjF,KAAK,CAAC6D,CAAC,CAAC,EAAErC,CAAC,CAAC;MACzCyD,sBAAsB,CAAC,IAAI,CAAC,CAAC/E,IAAI,CAACsB,CAAC,CAAC,EAAEqC,CAAC,CAAC;MACxC,OAAO,IAAI,CAAC,CAAC9D,EAAE,CAAC8D,CAAC,CAAC,CAACvB,CAAC,CAAC;MACrB,OAAO,IAAI,CAAC,CAACrC,GAAG,CAACuB,CAAC,CAAC,CAACc,CAAC,CAAC;MACtB,IAAI,CAAC,CAAChC,SAAS,EAAE;IACnB;IACA,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACE4E,OAAOA,CAAC1D,CAAC,EAAE2D,CAAC,EAAE;IACZ,IAAIC,GAAG,GAAG,IAAI,CAAC,CAACrF,EAAE,CAACyB,CAAC,CAAC;IACrB,IAAI4D,GAAG,EAAE;MACP,IAAIjB,KAAK,GAAGhD,MAAM,CAACqC,MAAM,CAAC4B,GAAG,CAAC;MAC9B,IAAI,CAACD,CAAC,EAAE;QACN,OAAOhB,KAAK;MACd;MACA,OAAOA,KAAK,CAAC5C,MAAM,CAACwC,IAAI,IAAIA,IAAI,CAACvC,CAAC,KAAK2D,CAAC,CAAC;IAC3C;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEE,QAAQA,CAAC7D,CAAC,EAAEqC,CAAC,EAAE;IACb,IAAIyB,IAAI,GAAG,IAAI,CAAC,CAACrF,GAAG,CAACuB,CAAC,CAAC;IACvB,IAAI8D,IAAI,EAAE;MACR,IAAInB,KAAK,GAAGhD,MAAM,CAACqC,MAAM,CAAC8B,IAAI,CAAC;MAC/B,IAAI,CAACzB,CAAC,EAAE;QACN,OAAOM,KAAK;MACd;MACA,OAAOA,KAAK,CAAC5C,MAAM,CAACwC,IAAI,IAAIA,IAAI,CAACF,CAAC,KAAKA,CAAC,CAAC;IAC3C;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE0B,SAASA,CAAC/D,CAAC,EAAEqC,CAAC,EAAE;IACd,IAAIqB,OAAO,GAAG,IAAI,CAACA,OAAO,CAAC1D,CAAC,EAAEqC,CAAC,CAAC;IAChC,IAAIqB,OAAO,EAAE;MACX,OAAOA,OAAO,CAACM,MAAM,CAAC,IAAI,CAACH,QAAQ,CAAC7D,CAAC,EAAEqC,CAAC,CAAC,CAAC;IAC5C;EACF;AACF;AAEA,SAASgB,oBAAoBA,CAACY,GAAG,EAAEC,CAAC,EAAE;EACpC,IAAID,GAAG,CAACC,CAAC,CAAC,EAAE;IACVD,GAAG,CAACC,CAAC,CAAC,EAAE;EACV,CAAC,MAAM;IACLD,GAAG,CAACC,CAAC,CAAC,GAAG,CAAC;EACZ;AACF;AAEA,SAAST,sBAAsBA,CAACQ,GAAG,EAAEC,CAAC,EAAE;EACtC,IAAI,CAAC,GAAED,GAAG,CAACC,CAAC,CAAC,EAAE;IAAE,OAAOD,GAAG,CAACC,CAAC,CAAC;EAAE;AAClC;AAEA,SAASjB,YAAYA,CAACpF,UAAU,EAAEsG,EAAE,EAAEC,EAAE,EAAEtB,IAAI,EAAE;EAC9C,IAAI9C,CAAC,GAAG,EAAE,GAAGmE,EAAE;EACf,IAAI9B,CAAC,GAAG,EAAE,GAAG+B,EAAE;EACf,IAAI,CAACvG,UAAU,IAAImC,CAAC,GAAGqC,CAAC,EAAE;IACxB,IAAIgC,GAAG,GAAGrE,CAAC;IACXA,CAAC,GAAGqC,CAAC;IACLA,CAAC,GAAGgC,GAAG;EACT;EACA,OAAOrE,CAAC,GAAGrC,cAAc,GAAG0E,CAAC,GAAG1E,cAAc,IAClCmF,IAAI,KAAK3E,SAAS,GAAGV,iBAAiB,GAAGqF,IAAI,CAAC;AAC5D;AAEA,SAASK,aAAaA,CAACtF,UAAU,EAAEsG,EAAE,EAAEC,EAAE,EAAEtB,IAAI,EAAE;EAC/C,IAAI9C,CAAC,GAAG,EAAE,GAAGmE,EAAE;EACf,IAAI9B,CAAC,GAAG,EAAE,GAAG+B,EAAE;EACf,IAAI,CAACvG,UAAU,IAAImC,CAAC,GAAGqC,CAAC,EAAE;IACxB,IAAIgC,GAAG,GAAGrE,CAAC;IACXA,CAAC,GAAGqC,CAAC;IACLA,CAAC,GAAGgC,GAAG;EACT;EACA,IAAInB,OAAO,GAAI;IAAElD,CAAC,EAAEA,CAAC;IAAEqC,CAAC,EAAEA;EAAE,CAAC;EAC7B,IAAIS,IAAI,EAAE;IACRI,OAAO,CAACJ,IAAI,GAAGA,IAAI;EACrB;EACA,OAAOI,OAAO;AAChB;AAEA,SAASI,WAAWA,CAACzF,UAAU,EAAEqF,OAAO,EAAE;EACxC,OAAOD,YAAY,CAACpF,UAAU,EAAEqF,OAAO,CAAClD,CAAC,EAAEkD,OAAO,CAACb,CAAC,EAAEa,OAAO,CAACJ,IAAI,CAAC;AACrE;AAEAwB,MAAM,CAACC,OAAO,GAAG3G,KAAK"},"metadata":{},"sourceType":"script","externalDependencies":[]}