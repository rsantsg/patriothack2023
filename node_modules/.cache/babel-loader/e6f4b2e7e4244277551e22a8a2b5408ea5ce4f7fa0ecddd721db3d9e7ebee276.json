{"ast":null,"code":"\"use strict\";\n\nmodule.exports = {\n  longestPath: longestPath,\n  slack: slack\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n  function dfs(v) {\n    var label = g.node(v);\n    if (visited.hasOwnProperty(v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n    var rank = Math.min(...g.outEdges(v).map(e => {\n      if (e == null) {\n        return Number.POSITIVE_INFINITY;\n      }\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n    if (rank === Number.POSITIVE_INFINITY) {\n      rank = 0;\n    }\n    return label.rank = rank;\n  }\n  g.sources().forEach(dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}","map":{"version":3,"names":["module","exports","longestPath","slack","g","visited","dfs","v","label","node","hasOwnProperty","rank","Math","min","outEdges","map","e","Number","POSITIVE_INFINITY","w","edge","minlen","sources","forEach"],"sources":["/Users/ron/Documents/developer/patriothack/node_modules/@dagrejs/dagre/lib/rank/util.js"],"sourcesContent":["\"use strict\";\n\nmodule.exports = {\n  longestPath: longestPath,\n  slack: slack\n};\n\n/*\n * Initializes ranks for the input graph using the longest path algorithm. This\n * algorithm scales well and is fast in practice, it yields rather poor\n * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom\n * ranks wide and leaving edges longer than necessary. However, due to its\n * speed, this algorithm is good for getting an initial ranking that can be fed\n * into other algorithms.\n *\n * This algorithm does not normalize layers because it will be used by other\n * algorithms in most cases. If using this algorithm directly, be sure to\n * run normalize at the end.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG.\n *    2. Input graph node labels can be assigned properties.\n *\n * Post-conditions:\n *\n *    1. Each node will be assign an (unnormalized) \"rank\" property.\n */\nfunction longestPath(g) {\n  var visited = {};\n\n  function dfs(v) {\n    var label = g.node(v);\n    if (visited.hasOwnProperty(v)) {\n      return label.rank;\n    }\n    visited[v] = true;\n\n    var rank = Math.min(...g.outEdges(v).map(e => {\n      if (e == null) {\n        return Number.POSITIVE_INFINITY;\n      }\n\n      return dfs(e.w) - g.edge(e).minlen;\n    }));\n\n    if (rank === Number.POSITIVE_INFINITY) {\n      rank = 0;\n    }\n\n    return (label.rank = rank);\n  }\n\n  g.sources().forEach(dfs);\n}\n\n/*\n * Returns the amount of slack for the given edge. The slack is defined as the\n * difference between the length of the edge and its minimum length.\n */\nfunction slack(g, e) {\n  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;\n}\n"],"mappings":"AAAA,YAAY;;AAEZA,MAAM,CAACC,OAAO,GAAG;EACfC,WAAW,EAAEA,WAAW;EACxBC,KAAK,EAAEA;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,WAAWA,CAACE,CAAC,EAAE;EACtB,IAAIC,OAAO,GAAG,CAAC,CAAC;EAEhB,SAASC,GAAGA,CAACC,CAAC,EAAE;IACd,IAAIC,KAAK,GAAGJ,CAAC,CAACK,IAAI,CAACF,CAAC,CAAC;IACrB,IAAIF,OAAO,CAACK,cAAc,CAACH,CAAC,CAAC,EAAE;MAC7B,OAAOC,KAAK,CAACG,IAAI;IACnB;IACAN,OAAO,CAACE,CAAC,CAAC,GAAG,IAAI;IAEjB,IAAII,IAAI,GAAGC,IAAI,CAACC,GAAG,CAAC,GAAGT,CAAC,CAACU,QAAQ,CAACP,CAAC,CAAC,CAACQ,GAAG,CAACC,CAAC,IAAI;MAC5C,IAAIA,CAAC,IAAI,IAAI,EAAE;QACb,OAAOC,MAAM,CAACC,iBAAiB;MACjC;MAEA,OAAOZ,GAAG,CAACU,CAAC,CAACG,CAAC,CAAC,GAAGf,CAAC,CAACgB,IAAI,CAACJ,CAAC,CAAC,CAACK,MAAM;IACpC,CAAC,CAAC,CAAC;IAEH,IAAIV,IAAI,KAAKM,MAAM,CAACC,iBAAiB,EAAE;MACrCP,IAAI,GAAG,CAAC;IACV;IAEA,OAAQH,KAAK,CAACG,IAAI,GAAGA,IAAI;EAC3B;EAEAP,CAAC,CAACkB,OAAO,CAAC,CAAC,CAACC,OAAO,CAACjB,GAAG,CAAC;AAC1B;;AAEA;AACA;AACA;AACA;AACA,SAASH,KAAKA,CAACC,CAAC,EAAEY,CAAC,EAAE;EACnB,OAAOZ,CAAC,CAACK,IAAI,CAACO,CAAC,CAACG,CAAC,CAAC,CAACR,IAAI,GAAGP,CAAC,CAACK,IAAI,CAACO,CAAC,CAACT,CAAC,CAAC,CAACI,IAAI,GAAGP,CAAC,CAACgB,IAAI,CAACJ,CAAC,CAAC,CAACK,MAAM;AAC/D"},"metadata":{},"sourceType":"script","externalDependencies":[]}