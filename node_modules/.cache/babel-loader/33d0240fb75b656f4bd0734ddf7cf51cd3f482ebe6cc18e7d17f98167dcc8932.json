{"ast":null,"code":"let Graph = require(\"@dagrejs/graphlib\").Graph;\nlet util = require(\"../util\");\nmodule.exports = buildLayerGraph;\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  let root = createRootNode(g),\n    result = new Graph({\n      compound: true\n    }).setGraph({\n      root: root\n    }).setDefaultNodeLabel(v => g.node(v));\n  g.nodes().forEach(v => {\n    let node = g.node(v),\n      parent = g.parent(v);\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      g[relationship](v).forEach(e => {\n        let u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, {\n          weight: g.edge(e).weight + weight\n        });\n      });\n      if (node.hasOwnProperty(\"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n  return result;\n}\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode(v = util.uniqueId(\"_root\")));\n  return v;\n}","map":{"version":3,"names":["Graph","require","util","module","exports","buildLayerGraph","g","rank","relationship","root","createRootNode","result","compound","setGraph","setDefaultNodeLabel","v","node","nodes","forEach","parent","minRank","maxRank","setNode","setParent","e","u","w","edge","weight","undefined","setEdge","hasOwnProperty","borderLeft","borderRight","hasNode","uniqueId"],"sources":["/Users/ron/Documents/developer/patriothack/node_modules/@dagrejs/dagre/lib/order/build-layer-graph.js"],"sourcesContent":["let Graph = require(\"@dagrejs/graphlib\").Graph;\nlet util = require(\"../util\");\n\nmodule.exports = buildLayerGraph;\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  let root = createRootNode(g),\n    result = new Graph({ compound: true }).setGraph({ root: root })\n      .setDefaultNodeLabel(v => g.node(v));\n\n  g.nodes().forEach(v => {\n    let node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      g[relationship](v).forEach(e => {\n        let u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = edge !== undefined ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (node.hasOwnProperty(\"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = util.uniqueId(\"_root\"))));\n  return v;\n}\n"],"mappings":"AAAA,IAAIA,KAAK,GAAGC,OAAO,CAAC,mBAAmB,CAAC,CAACD,KAAK;AAC9C,IAAIE,IAAI,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE7BE,MAAM,CAACC,OAAO,GAAGC,eAAe;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,eAAeA,CAACC,CAAC,EAAEC,IAAI,EAAEC,YAAY,EAAE;EAC9C,IAAIC,IAAI,GAAGC,cAAc,CAACJ,CAAC,CAAC;IAC1BK,MAAM,GAAG,IAAIX,KAAK,CAAC;MAAEY,QAAQ,EAAE;IAAK,CAAC,CAAC,CAACC,QAAQ,CAAC;MAAEJ,IAAI,EAAEA;IAAK,CAAC,CAAC,CAC5DK,mBAAmB,CAACC,CAAC,IAAIT,CAAC,CAACU,IAAI,CAACD,CAAC,CAAC,CAAC;EAExCT,CAAC,CAACW,KAAK,CAAC,CAAC,CAACC,OAAO,CAACH,CAAC,IAAI;IACrB,IAAIC,IAAI,GAAGV,CAAC,CAACU,IAAI,CAACD,CAAC,CAAC;MAClBI,MAAM,GAAGb,CAAC,CAACa,MAAM,CAACJ,CAAC,CAAC;IAEtB,IAAIC,IAAI,CAACT,IAAI,KAAKA,IAAI,IAAIS,IAAI,CAACI,OAAO,IAAIb,IAAI,IAAIA,IAAI,IAAIS,IAAI,CAACK,OAAO,EAAE;MACtEV,MAAM,CAACW,OAAO,CAACP,CAAC,CAAC;MACjBJ,MAAM,CAACY,SAAS,CAACR,CAAC,EAAEI,MAAM,IAAIV,IAAI,CAAC;;MAEnC;MACAH,CAAC,CAACE,YAAY,CAAC,CAACO,CAAC,CAAC,CAACG,OAAO,CAACM,CAAC,IAAI;QAC9B,IAAIC,CAAC,GAAGD,CAAC,CAACT,CAAC,KAAKA,CAAC,GAAGS,CAAC,CAACE,CAAC,GAAGF,CAAC,CAACT,CAAC;UAC3BY,IAAI,GAAGhB,MAAM,CAACgB,IAAI,CAACF,CAAC,EAAEV,CAAC,CAAC;UACxBa,MAAM,GAAGD,IAAI,KAAKE,SAAS,GAAGF,IAAI,CAACC,MAAM,GAAG,CAAC;QAC/CjB,MAAM,CAACmB,OAAO,CAACL,CAAC,EAAEV,CAAC,EAAE;UAAEa,MAAM,EAAEtB,CAAC,CAACqB,IAAI,CAACH,CAAC,CAAC,CAACI,MAAM,GAAGA;QAAO,CAAC,CAAC;MAC7D,CAAC,CAAC;MAEF,IAAIZ,IAAI,CAACe,cAAc,CAAC,SAAS,CAAC,EAAE;QAClCpB,MAAM,CAACW,OAAO,CAACP,CAAC,EAAE;UAChBiB,UAAU,EAAEhB,IAAI,CAACgB,UAAU,CAACzB,IAAI,CAAC;UACjC0B,WAAW,EAAEjB,IAAI,CAACiB,WAAW,CAAC1B,IAAI;QACpC,CAAC,CAAC;MACJ;IACF;EACF,CAAC,CAAC;EAEF,OAAOI,MAAM;AACf;AAEA,SAASD,cAAcA,CAACJ,CAAC,EAAE;EACzB,IAAIS,CAAC;EACL,OAAOT,CAAC,CAAC4B,OAAO,CAAEnB,CAAC,GAAGb,IAAI,CAACiC,QAAQ,CAAC,OAAO,CAAE,CAAC,CAAC;EAC/C,OAAOpB,CAAC;AACV"},"metadata":{},"sourceType":"script","externalDependencies":[]}