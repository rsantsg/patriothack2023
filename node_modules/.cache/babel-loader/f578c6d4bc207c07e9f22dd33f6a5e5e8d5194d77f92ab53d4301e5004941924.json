{"ast":null,"code":"\"use strict\";\n\nlet Graph = require(\"@dagrejs/graphlib\").Graph;\nlet util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and KÃ¶pf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  let conflicts = {};\n  function visitLayer(prevLayer, layer) {\n    let\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = layer[layer.length - 1];\n    layer.forEach((v, i) => {\n      let w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n      if (w || v === lastNode) {\n        layer.slice(scanPos, i + 1).forEach(scanNode => {\n          g.predecessors(scanNode).forEach(u => {\n            let uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) && !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n    return layer;\n  }\n  layering.reduce(visitLayer);\n  return conflicts;\n}\nfunction findType2Conflicts(g, layering) {\n  let conflicts = {};\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    let v;\n    util.range(southPos, southEnd).forEach(i => {\n      v = south[i];\n      if (g.node(v).dummy) {\n        g.predecessors(v).forEach(u => {\n          let uNode = g.node(u);\n          if (uNode.dummy && (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n  function visitLayer(north, south) {\n    let prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n    south.forEach((v, southLookahead) => {\n      if (g.node(v).dummy === \"border\") {\n        let predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n    return south;\n  }\n  layering.reduce(visitLayer);\n  return conflicts;\n}\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return g.predecessors(v).find(u => g.node(u).dummy);\n  }\n}\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n  let conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && conflicts[v].hasOwnProperty(w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  let root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  layering.forEach(layer => {\n    layer.forEach((v, order) => {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n  layering.forEach(layer => {\n    let prevIdx = -1;\n    layer.forEach(v => {\n      let ws = neighborFn(v);\n      if (ws.length) {\n        ws = ws.sort((a, b) => pos[a] - pos[b]);\n        let mp = (ws.length - 1) / 2;\n        for (let i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          let w = ws[i];\n          if (align[v] === v && prevIdx < pos[w] && !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n  return {\n    root: root,\n    align: align\n  };\n}\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  let xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n  function iterate(setXsFunc, nextNodesFunc) {\n    let stack = blockG.nodes();\n    let elem = stack.pop();\n    let visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce((acc, e) => {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    let min = blockG.outEdges(elem).reduce((acc, e) => {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n    let node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  Object.keys(align).forEach(v => xs[v] = xs[root[v]]);\n  return xs;\n}\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  let blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n  layering.forEach(layer => {\n    let u;\n    layer.forEach(v => {\n      let vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return Object.values(xss).reduce((currentMinAndXs, xs) => {\n    let max = Number.NEGATIVE_INFINITY;\n    let min = Number.POSITIVE_INFINITY;\n    Object.entries(xs).forEach(([v, x]) => {\n      let halfWidth = width(g, v) / 2;\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n    const newMin = max - min;\n    if (newMin < currentMinAndXs[0]) {\n      currentMinAndXs = [newMin, xs];\n    }\n    return currentMinAndXs;\n  }, [Number.POSITIVE_INFINITY, null])[1];\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  let alignToVals = Object.values(alignTo),\n    alignToMin = Math.min(...alignToVals),\n    alignToMax = Math.max(...alignToVals);\n  [\"u\", \"d\"].forEach(vert => {\n    [\"l\", \"r\"].forEach(horiz => {\n      let alignment = vert + horiz,\n        xs = xss[alignment];\n      if (xs === alignTo) return;\n      let xsVals = Object.values(xs);\n      let delta = alignToMin - Math.min(...xsVals);\n      if (horiz !== \"l\") {\n        delta = alignToMax - Math.max(...xsVals);\n      }\n      if (delta) {\n        xss[alignment] = util.mapValues(xs, x => x + delta);\n      }\n    });\n  });\n}\nfunction balance(xss, align) {\n  return util.mapValues(xss.ul, (num, v) => {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      let xs = Object.values(xss).map(xs => xs[v]).sort((a, b) => a - b);\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\nfunction positionX(g) {\n  let layering = util.buildLayerMatrix(g);\n  let conflicts = Object.assign(findType1Conflicts(g, layering), findType2Conflicts(g, layering));\n  let xss = {};\n  let adjustedLayering;\n  [\"u\", \"d\"].forEach(vert => {\n    adjustedLayering = vert === \"u\" ? layering : Object.values(layering).reverse();\n    [\"l\", \"r\"].forEach(horiz => {\n      if (horiz === \"r\") {\n        adjustedLayering = adjustedLayering.map(inner => {\n          return Object.values(inner).reverse();\n        });\n      }\n      let neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      let align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      let xs = horizontalCompaction(g, adjustedLayering, align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = util.mapValues(xs, x => -x);\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n  let smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return (g, v, w) => {\n    let vLabel = g.node(v);\n    let wLabel = g.node(w);\n    let sum = 0;\n    let delta;\n    sum += vLabel.width / 2;\n    if (vLabel.hasOwnProperty(\"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n        case \"l\":\n          delta = -vLabel.width / 2;\n          break;\n        case \"r\":\n          delta = vLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += wLabel.width / 2;\n    if (wLabel.hasOwnProperty(\"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n        case \"l\":\n          delta = wLabel.width / 2;\n          break;\n        case \"r\":\n          delta = -wLabel.width / 2;\n          break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n    return sum;\n  };\n}\nfunction width(g, v) {\n  return g.node(v).width;\n}","map":{"version":3,"names":["Graph","require","util","module","exports","positionX","findType1Conflicts","findType2Conflicts","addConflict","hasConflict","verticalAlignment","horizontalCompaction","alignCoordinates","findSmallestWidthAlignment","balance","g","layering","conflicts","visitLayer","prevLayer","layer","k0","scanPos","prevLayerLength","length","lastNode","forEach","v","i","w","findOtherInnerSegmentNode","k1","node","order","slice","scanNode","predecessors","u","uLabel","uPos","dummy","reduce","scan","south","southPos","southEnd","prevNorthBorder","nextNorthBorder","range","uNode","north","prevNorthPos","nextNorthPos","southLookahead","find","tmp","conflictsV","hasOwnProperty","neighborFn","root","align","pos","prevIdx","ws","sort","a","b","mp","Math","floor","il","ceil","reverseSep","xs","blockG","buildBlockGraph","borderType","iterate","setXsFunc","nextNodesFunc","stack","nodes","elem","pop","visited","push","concat","pass1","inEdges","acc","e","max","edge","pass2","min","outEdges","Number","POSITIVE_INFINITY","bind","successors","Object","keys","blockGraph","graphLabel","graph","sepFn","sep","nodesep","edgesep","vRoot","setNode","uRoot","prevMax","setEdge","xss","values","currentMinAndXs","NEGATIVE_INFINITY","entries","x","halfWidth","width","newMin","alignTo","alignToVals","alignToMin","alignToMax","vert","horiz","alignment","xsVals","delta","mapValues","ul","num","toLowerCase","map","buildLayerMatrix","assign","adjustedLayering","reverse","inner","smallestWidth","nodeSep","edgeSep","vLabel","wLabel","sum","labelpos"],"sources":["/Users/ron/Documents/developer/patriothack/node_modules/@dagrejs/dagre/lib/position/bk.js"],"sourcesContent":["\"use strict\";\n\nlet Graph = require(\"@dagrejs/graphlib\").Graph;\nlet util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and KÃ¶pf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  let conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    let\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = layer[layer.length - 1];\n\n    layer.forEach((v, i) => {\n      let w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        layer.slice(scanPos, i+1).forEach(scanNode => {\n          g.predecessors(scanNode).forEach(u => {\n            let uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) &&\n                !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  layering.reduce(visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  let conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    let v;\n    util.range(southPos, southEnd).forEach(i => {\n      v = south[i];\n      if (g.node(v).dummy) {\n        g.predecessors(v).forEach(u => {\n          let uNode = g.node(u);\n          if (uNode.dummy &&\n              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n\n  function visitLayer(north, south) {\n    let prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    south.forEach((v, southLookahead) => {\n      if (g.node(v).dummy === \"border\") {\n        let predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  layering.reduce(visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return g.predecessors(v).find(u => g.node(u).dummy);\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  let conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    let tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return !!conflicts[v] && conflicts[v].hasOwnProperty(w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  let root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  layering.forEach(layer => {\n    layer.forEach((v, order) => {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  layering.forEach(layer => {\n    let prevIdx = -1;\n    layer.forEach(v => {\n      let ws = neighborFn(v);\n      if (ws.length) {\n        ws = ws.sort((a, b) => pos[a] - pos[b]);\n        let mp = (ws.length - 1) / 2;\n        for (let i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          let w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  let xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    let stack = blockG.nodes();\n    let elem = stack.pop();\n    let visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce((acc, e) => {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    let min = blockG.outEdges(elem).reduce((acc, e) => {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    let node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  Object.keys(align).forEach(v => xs[v] = xs[root[v]]);\n\n  return xs;\n}\n\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  let blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  layering.forEach(layer => {\n    let u;\n    layer.forEach(v => {\n      let vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return Object.values(xss).reduce((currentMinAndXs, xs) => {\n    let max = Number.NEGATIVE_INFINITY;\n    let min = Number.POSITIVE_INFINITY;\n\n    Object.entries(xs).forEach(([v, x]) => {\n      let halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    const newMin = max - min;\n    if (newMin < currentMinAndXs[0]) {\n      currentMinAndXs = [newMin, xs];\n    }\n    return currentMinAndXs;\n  }, [Number.POSITIVE_INFINITY, null])[1];\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  let alignToVals = Object.values(alignTo),\n    alignToMin = Math.min(...alignToVals),\n    alignToMax = Math.max(...alignToVals);\n\n  [\"u\", \"d\"].forEach(vert => {\n    [\"l\", \"r\"].forEach(horiz => {\n      let alignment = vert + horiz,\n        xs = xss[alignment];\n\n      if (xs === alignTo) return;\n\n      let xsVals = Object.values(xs);\n      let delta = alignToMin - Math.min(...xsVals);\n      if (horiz !== \"l\") {\n        delta = alignToMax - Math.max(...xsVals);\n      }\n\n      if (delta) {\n        xss[alignment] = util.mapValues(xs, x => x + delta);\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return util.mapValues(xss.ul, (num, v) => {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      let xs = Object.values(xss).map(xs => xs[v]).sort((a, b) => a - b);\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  let layering = util.buildLayerMatrix(g);\n  let conflicts = Object.assign(\n    findType1Conflicts(g, layering),\n    findType2Conflicts(g, layering));\n\n  let xss = {};\n  let adjustedLayering;\n  [\"u\", \"d\"].forEach(vert => {\n    adjustedLayering = vert === \"u\" ? layering : Object.values(layering).reverse();\n    [\"l\", \"r\"].forEach(horiz => {\n      if (horiz === \"r\") {\n        adjustedLayering = adjustedLayering.map(inner => {\n          return Object.values(inner).reverse();\n        });\n      }\n\n      let neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      let align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      let xs = horizontalCompaction(g, adjustedLayering,\n        align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = util.mapValues(xs, x => -x);\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n\n  let smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return (g, v, w) => {\n    let vLabel = g.node(v);\n    let wLabel = g.node(w);\n    let sum = 0;\n    let delta;\n\n    sum += vLabel.width / 2;\n    if (vLabel.hasOwnProperty(\"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = -vLabel.width / 2; break;\n      case \"r\": delta = vLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (wLabel.hasOwnProperty(\"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = wLabel.width / 2; break;\n      case \"r\": delta = -wLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}